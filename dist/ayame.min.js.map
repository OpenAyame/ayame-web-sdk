{"version":3,"file":"ayame.min.js","sources":["../src/utils.ts","../src/connection/base.ts","../src/connection/index.ts","../src/ayame.ts"],"sourcesContent":["import { VideoCodecOption } from './connection/options';\n\n/**\n * @ignore\n */\ninterface Window {\n  performance: WindowPerformance;\n  navigator: any;\n}\ninterface WindowPerformance {\n  now(): number;\n}\ndeclare let window: Window;\n\n/**\n * @ignore\n */\nexport function randomString(strLength: number): string {\n  const result = [];\n  const charSet = '0123456789';\n  while (strLength--) {\n    result.push(charSet.charAt(Math.floor(Math.random() * charSet.length)));\n  }\n  return result.join('');\n}\n\n/**\n * @ignore\n */\nexport function browser(): string {\n  const ua = window.navigator.userAgent.toLocaleLowerCase();\n  if (ua.indexOf('edge') !== -1) {\n    return 'edge';\n  } else if (ua.indexOf('chrome') !== -1 && ua.indexOf('edge') === -1) {\n    return 'chrome';\n  } else if (ua.indexOf('safari') !== -1 && ua.indexOf('chrome') === -1) {\n    return 'safari';\n  } else if (ua.indexOf('opera') !== -1) {\n    return 'opera';\n  } else if (ua.indexOf('firefox') !== -1) {\n    return 'firefox';\n  }\n  return 'unknown';\n}\n\n/**\n * @ignore\n */\nexport function traceLog(title: string, value?: string | Record<string, any>): void {\n  let prefix = '';\n  if (window.performance) {\n    prefix = '[Ayame ' + (window.performance.now() / 1000).toFixed(3) + ']';\n  }\n  if (browser() === 'edge') {\n    console.log(prefix + ' ' + title + '\\n', value);\n  } else {\n    console.info(prefix + ' ' + title + '\\n', value);\n  }\n}\n\n// Stack Overflow より引用: https://stackoverflow.com/a/52760103\n// https://stackoverflow.com/questions/52738290/how-to-remove-video-codecs-in-webrtc-sdp\n/** @private */\nexport function getVideoCodecsFromString(codec: VideoCodecOption, codecs: Array<any>): Array<any> {\n  let mimeType = '';\n  if (codec === 'VP8') {\n    mimeType = 'video/VP8';\n  } else if (codec === 'VP9') {\n    mimeType = 'video/VP9';\n  } else if (codec === 'H264') {\n    mimeType = 'video/H264';\n  } else {\n    mimeType = `video/${codec}`;\n  }\n  const filteredCodecs: Array<any> = codecs.filter((c) => c.mimeType == mimeType);\n  if (filteredCodecs.length < 1) {\n    throw new Error('invalid video codec type');\n  }\n  return filteredCodecs;\n}\n\n/**\n * @ignore\n */\nexport function removeCodec(sdp: string, codec: VideoCodecOption): string {\n  function internalFunc(tmpSdp: string): string {\n    // eslint-disable-next-line no-useless-escape\n    const codecre = new RegExp('(a=rtpmap:(\\\\d*) ' + codec + '/90000\\\\r\\\\n)');\n    const rtpmaps = tmpSdp.match(codecre);\n    if (rtpmaps == null || rtpmaps.length <= 2) {\n      return sdp;\n    }\n    const rtpmap = rtpmaps[2];\n    let modsdp = tmpSdp.replace(codecre, '');\n\n    const rtcpre = new RegExp('(a=rtcp-fb:' + rtpmap + '.*\\r\\n)', 'g');\n    modsdp = modsdp.replace(rtcpre, '');\n\n    const fmtpre = new RegExp('(a=fmtp:' + rtpmap + '.*\\r\\n)', 'g');\n    modsdp = modsdp.replace(fmtpre, '');\n\n    const aptpre = new RegExp('(a=fmtp:(\\\\d*) apt=' + rtpmap + '\\\\r\\\\n)');\n    const aptmaps = modsdp.match(aptpre);\n    let fmtpmap = '';\n    if (aptmaps != null && aptmaps.length >= 3) {\n      fmtpmap = aptmaps[2];\n      modsdp = modsdp.replace(aptpre, '');\n\n      const rtppre = new RegExp('(a=rtpmap:' + fmtpmap + '.*\\r\\n)', 'g');\n      modsdp = modsdp.replace(rtppre, '');\n    }\n\n    const videore = /(m=video.*\\r\\n)/;\n    const videolines = modsdp.match(videore);\n    if (videolines != null) {\n      //If many m=video are found in SDP, this program doesn't work.\n      const videoline = videolines[0].substring(0, videolines[0].length - 2);\n      const videoelems = videoline.split(' ');\n      let modvideoline = videoelems[0];\n      videoelems.forEach((videoelem, index) => {\n        if (index === 0) return;\n        if (videoelem == rtpmap || videoelem == fmtpmap) {\n          return;\n        }\n        modvideoline += ' ' + videoelem;\n      });\n      modvideoline += '\\r\\n';\n      modsdp = modsdp.replace(videore, modvideoline);\n    }\n    return internalFunc(modsdp);\n  }\n  return internalFunc(sdp);\n}\n","/* @private */\nimport { traceLog, getVideoCodecsFromString, removeCodec, browser } from '../utils';\nimport { ConnectionOptions, VideoCodecOption } from './options';\n\n/**\n * @ignore\n */\ninterface AyameRegisterMessage {\n  type: string;\n  roomId: string;\n  clientId: string;\n  key?: string;\n  authnMetadata?: any;\n  standalone?: boolean;\n}\n\n/**\n * @ignore\n */\nclass ConnectionBase {\n  debug: boolean;\n  roomId: string;\n  signalingUrl: string;\n  options: ConnectionOptions;\n  connectionState: string;\n  stream: MediaStream | null;\n  remoteStream: MediaStream | null;\n  authnMetadata: any;\n  authzMetadata: any;\n  _ws: WebSocket | null;\n  _pc: RTCPeerConnection | null;\n  _callbacks: any;\n  _removeCodec: boolean;\n  _isOffer: boolean;\n  _isExistUser: boolean;\n  _dataChannels: Array<RTCDataChannel>;\n  _pcConfig: {\n    iceServers: Array<RTCIceServer>;\n    iceTransportPolicy: RTCIceTransportPolicy;\n  };\n\n  /**\n   * @ignore\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  on(kind: string, callback: Function): void {\n    if (kind in this._callbacks) {\n      this._callbacks[kind] = callback;\n    }\n  }\n\n  /**\n   * オブジェクトを生成し、リモートのピアまたはサーバーに接続します。\n   * @param signalingUrl シグナリングに利用する URL\n   * @param roomId Ayame のルームID\n   * @param options Ayame の接続オプション\n   * @param [debug=false] デバッグログの出力可否\n   * @param [isRelay=false] iceTransportPolicy を強制的に relay にするか\n   * @listens {open} Ayame Server に accept され、PeerConnection が生成されると送信されます。\n   * @listens {connect} PeerConnection が接続されると送信されます。\n   * @listens {disconnect} PeerConnection が切断されると送信されます。\n   * @listens {addstream} リモートのストリームが追加されると送信されます。\n   * @listens {removestream} リモートのストリームが削除されると送信されます。\n   * @listens {bye} Ayame Server から bye を受信すると送信されます。\n   */\n  constructor(signalingUrl: string, roomId: string, options: ConnectionOptions, debug = false, isRelay = false) {\n    this.debug = debug;\n    this.roomId = roomId;\n    this.signalingUrl = signalingUrl;\n    this.options = options;\n    this._removeCodec = false;\n    this.stream = null;\n    this.remoteStream = null;\n    this._pc = null;\n    this._ws = null;\n    this.authnMetadata = null;\n    this.authzMetadata = null;\n    this._dataChannels = [];\n    this._isOffer = false;\n    this._isExistUser = false;\n    this.connectionState = 'new';\n    this._pcConfig = {\n      iceServers: this.options.iceServers,\n      iceTransportPolicy: isRelay ? 'relay' : 'all'\n    };\n    this._callbacks = {\n      open: () => {},\n      connect: () => {},\n      disconnect: () => {},\n      addstream: () => {},\n      removestream: () => {},\n      bye: () => {},\n      datachannel: () => {}\n    };\n  }\n\n  async _disconnect(): Promise<void> {\n    await this._dataChannels.forEach(async (dataChannel: RTCDataChannel) => {\n      await this._closeDataChannel(dataChannel);\n    });\n    await this._closePeerConnection();\n    await this._closeWebSocketConnection();\n    this.authzMetadata = null;\n    this._removeCodec = false;\n    this._isOffer = false;\n    this._isExistUser = false;\n    this._dataChannels = [];\n    this.connectionState = 'new';\n  }\n\n  async _signaling(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      if (this._ws) {\n        return reject('WS-ALREADY-EXISTS');\n      }\n      this._ws = new WebSocket(this.signalingUrl);\n      this._ws.onclose = async () => {\n        if (!this.options.standalone) {\n          await this._disconnect();\n          this._callbacks.disconnect({ reason: 'WS-CLOSED' });\n          return reject('WS-CLOSED');\n        }\n      };\n      this._ws.onerror = async () => {\n        await this._disconnect();\n        return reject('WS-CLOSED-WITH-ERROR');\n      };\n      this._ws.onopen = () => {\n        const registerMessage: AyameRegisterMessage = {\n          type: 'register',\n          roomId: this.roomId,\n          clientId: this.options.clientId,\n          authnMetadata: undefined,\n          key: undefined,\n          standalone: this.options.standalone\n        };\n        if (this.authnMetadata !== null) {\n          registerMessage.authnMetadata = this.authnMetadata;\n        }\n        if (this.options.signalingKey !== null) {\n          registerMessage.key = this.options.signalingKey;\n        }\n        this._sendWs(registerMessage);\n        if (this._ws) {\n          this._ws.onmessage = async (event: MessageEvent) => {\n            try {\n              if (typeof event.data !== 'string') {\n                return;\n              }\n              const message = JSON.parse(event.data);\n              if (message.type === 'ping') {\n                this._sendWs({ type: 'pong' });\n              } else if (message.type === 'bye') {\n                this._callbacks.bye(event);\n                return resolve();\n              } else if (message.type === 'accept') {\n                this.authzMetadata = message.authzMetadata;\n                if (Array.isArray(message.iceServers) && message.iceServers.length > 0) {\n                  this._traceLog('iceServers=>', message.iceServers);\n                  this._pcConfig.iceServers = message.iceServers;\n                }\n                this._traceLog('isExistUser=>', message.isExistUser);\n                this._isExistUser = message.isExistUser;\n                this._createPeerConnection();\n                if (this._isExistUser === true) {\n                  await this._sendOffer();\n                }\n                return resolve();\n              } else if (message.type === 'reject') {\n                await this._disconnect();\n                this._callbacks.disconnect({ reason: message.reason || 'REJECTED' });\n                return reject('REJECTED');\n              } else if (message.type === 'offer') {\n                if (this._pc && this._pc.signalingState === 'have-local-offer') {\n                  this._createPeerConnection();\n                }\n                this._setOffer(new RTCSessionDescription(message));\n              } else if (message.type === 'answer') {\n                await this._setAnswer(new RTCSessionDescription(message));\n              } else if (message.type === 'candidate') {\n                if (message.ice) {\n                  this._traceLog('Received ICE candidate ...', message.ice);\n                  const candidate = new RTCIceCandidate(message.ice);\n                  this._addIceCandidate(candidate);\n                }\n              }\n            } catch (error) {\n              await this._disconnect();\n              this._callbacks.disconnect({ reason: 'SIGNALING-ERROR', error: error });\n            }\n          };\n        }\n      };\n    });\n  }\n\n  _createPeerConnection(): void {\n    this._traceLog('RTCConfiguration=>', this._pcConfig);\n    const pc = new RTCPeerConnection(this._pcConfig);\n    const audioTrack = this.stream && this.stream.getAudioTracks()[0];\n    if (audioTrack && this.options.audio.direction !== 'recvonly') {\n      pc.addTrack(audioTrack, this.stream!);\n    } else if (this.options.audio.enabled) {\n      pc.addTransceiver('audio', { direction: 'recvonly' });\n    }\n    const videoTrack = this.stream && this.stream.getVideoTracks()[0];\n    if (videoTrack && this.options.video.direction !== 'recvonly') {\n      const videoSender = pc.addTrack(videoTrack, this.stream!);\n      const videoTransceiver = this._getTransceiver(pc, videoSender);\n      if (this._isVideoCodecSpecified() && videoTransceiver !== null) {\n        if (typeof videoTransceiver.setCodecPreferences !== 'undefined') {\n          const videoCapabilities = RTCRtpSender.getCapabilities('video');\n          if (videoCapabilities) {\n            let videoCodecs = [];\n            if (this.options.video.codec) {\n              videoCodecs = getVideoCodecsFromString(this.options.video.codec, videoCapabilities.codecs);\n            }\n            this._traceLog('video codecs=', videoCodecs);\n            videoTransceiver.setCodecPreferences(videoCodecs);\n          }\n        } else {\n          this._removeCodec = true;\n        }\n      }\n    } else if (this.options.video.enabled) {\n      const videoTransceiver = pc.addTransceiver('video', { direction: 'recvonly' });\n      if (this._isVideoCodecSpecified()) {\n        if (typeof videoTransceiver.setCodecPreferences !== 'undefined') {\n          const videoCapabilities = RTCRtpSender.getCapabilities('video');\n          if (videoCapabilities) {\n            let videoCodecs = [];\n            if (this.options.video.codec) {\n              videoCodecs = getVideoCodecsFromString(this.options.video.codec, videoCapabilities.codecs);\n            }\n            this._traceLog('video codecs=', videoCodecs);\n            videoTransceiver.setCodecPreferences(videoCodecs);\n          }\n        } else {\n          this._removeCodec = true;\n        }\n      }\n    }\n    const tracks: Array<MediaStreamTrack> = [];\n    pc.ontrack = (event: RTCTrackEvent) => {\n      const callbackEvent: any = event;\n      this._traceLog('peer.ontrack()', event);\n      if (browser() === 'safari') {\n        tracks.push(event.track);\n        const mediaStream = new MediaStream(tracks);\n        this.remoteStream = mediaStream;\n      } else {\n        this.remoteStream = event.streams[0];\n      }\n      callbackEvent.stream = this.remoteStream;\n      this._callbacks.addstream(callbackEvent);\n    };\n    pc.onicecandidate = (event: RTCPeerConnectionIceEvent) => {\n      this._traceLog('peer.onicecandidate()', event);\n      if (event.candidate) {\n        this._sendIceCandidate(event.candidate);\n      } else {\n        this._traceLog('empty ice event', '');\n      }\n    };\n    pc.oniceconnectionstatechange = async () => {\n      this._traceLog('ICE connection Status has changed to ', pc.iceConnectionState);\n      if (this.connectionState !== pc.iceConnectionState) {\n        this.connectionState = pc.iceConnectionState;\n        switch (this.connectionState) {\n          case 'connected':\n            this._isOffer = false;\n            this._callbacks.connect();\n            break;\n          case 'disconnected':\n          case 'failed':\n            await this._disconnect();\n            this._callbacks.disconnect({ reason: 'ICE-CONNECTION-STATE-FAILED' });\n            break;\n        }\n      }\n    };\n    pc.onconnectionstatechange = (_) => {\n      if (pc.connectionState === 'connected') {\n        if (this.options.standalone) {\n          this._sendWs({ type: 'connected' });\n        }\n      }\n    };\n    pc.onsignalingstatechange = (_) => {\n      this._traceLog('signaling state changes:', pc.signalingState);\n    };\n    pc.ondatachannel = this._onDataChannel.bind(this);\n    if (!this._pc) {\n      this._pc = pc;\n      this._callbacks.open({ authzMetadata: this.authzMetadata });\n    } else {\n      this._pc = pc;\n    }\n  }\n\n  async _createDataChannel(label: string, options: RTCDataChannelInit | undefined): Promise<RTCDataChannel | null> {\n    return new Promise<RTCDataChannel | null>((resolve, reject) => {\n      if (!this._pc) return reject('PeerConnection Does Not Ready');\n      if (this._isOffer) return reject('PeerConnection Has Local Offer');\n      let dataChannel = this._findDataChannel(label);\n      if (dataChannel) {\n        return reject('DataChannel Already Exists!');\n      }\n      if (this._isExistUser) {\n        dataChannel = this._pc.createDataChannel(label, options);\n        dataChannel.onclose = (event: Record<string, any>) => {\n          this._traceLog('datachannel onclosed=>', event);\n          this._dataChannels = this._dataChannels.filter((dataChannel) => dataChannel.label != label);\n        };\n        dataChannel.onerror = (event: Record<string, any>) => {\n          this._traceLog('datachannel onerror=>', event);\n          this._dataChannels = this._dataChannels.filter((dataChannel) => dataChannel.label != label);\n        };\n        dataChannel.onmessage = (event: any) => {\n          this._traceLog('datachannel onmessage=>', event.data);\n          event.label = label;\n        };\n        dataChannel.onopen = (event: Record<string, any>) => {\n          this._traceLog('datachannel onopen=>', event);\n        };\n        this._dataChannels.push(dataChannel);\n        return resolve(dataChannel);\n      }\n      return resolve(null);\n    });\n  }\n\n  _onDataChannel(event: RTCDataChannelEvent): void {\n    this._traceLog('on data channel', event);\n    if (!this._pc) return;\n    const dataChannel = event.channel;\n    const label = event.channel.label;\n    if (!event.channel) return;\n    if (!label || label.length < 1) return;\n    dataChannel.onopen = async (event: Record<string, any>) => {\n      this._traceLog('datachannel onopen=>', event);\n    };\n    dataChannel.onclose = async (event: Record<string, any>) => {\n      this._traceLog('datachannel onclosed=>', event);\n    };\n    dataChannel.onerror = async (event: Record<string, any>) => {\n      this._traceLog('datachannel onerror=>', event);\n    };\n    dataChannel.onmessage = (event: any) => {\n      this._traceLog('datachannel onmessage=>', event.data);\n      event.label = label;\n    };\n    if (!this._findDataChannel(label)) {\n      this._dataChannels.push(event.channel);\n    } else {\n      this._dataChannels = this._dataChannels.map((channel) => {\n        if (channel.label == label) {\n          return dataChannel;\n        } else {\n          return channel;\n        }\n      });\n    }\n    this._callbacks.datachannel(dataChannel);\n  }\n\n  async _sendOffer() {\n    if (!this._pc) {\n      return;\n    }\n    if (browser() === 'safari') {\n      if (this.options.video.enabled && this.options.video.direction === 'sendrecv') {\n        this._pc.addTransceiver('video', { direction: 'recvonly' });\n      }\n      if (this.options.audio.enabled && this.options.audio.direction === 'sendrecv') {\n        this._pc.addTransceiver('audio', { direction: 'recvonly' });\n      }\n    }\n    const offer: any = await this._pc.createOffer({\n      offerToReceiveAudio: this.options.audio.enabled && this.options.audio.direction !== 'sendonly',\n      offerToReceiveVideo: this.options.video.enabled && this.options.video.direction !== 'sendonly'\n    });\n    if (this._removeCodec && this.options.video.codec) {\n      const codecs: Array<VideoCodecOption> = ['VP8', 'VP9', 'H264'];\n      codecs.forEach((codec: VideoCodecOption) => {\n        if (this.options.video.codec !== codec) {\n          offer.sdp = removeCodec(offer.sdp, codec);\n        }\n      });\n    }\n    this._traceLog('create offer sdp, sdp=', offer.sdp);\n    await this._pc.setLocalDescription(offer);\n    if (this._pc.localDescription) {\n      this._sendSdp(this._pc.localDescription);\n    }\n    this._isOffer = true;\n  }\n\n  _isVideoCodecSpecified(): boolean {\n    return this.options.video.enabled && this.options.video.codec !== null;\n  }\n\n  async _createAnswer(): Promise<void> {\n    if (!this._pc) {\n      return;\n    }\n    try {\n      const answer = await this._pc.createAnswer();\n      this._traceLog('create answer sdp, sdp=', answer.sdp);\n      await this._pc.setLocalDescription(answer);\n      if (this._pc.localDescription) this._sendSdp(this._pc.localDescription);\n    } catch (error) {\n      await this._disconnect();\n      this._callbacks.disconnect({ reason: 'CREATE-ANSWER-ERROR', error: error });\n    }\n  }\n\n  async _setAnswer(sessionDescription: RTCSessionDescription): Promise<void> {\n    if (!this._pc) {\n      return;\n    }\n    await this._pc.setRemoteDescription(sessionDescription);\n    this._traceLog('set answer sdp=', sessionDescription.sdp);\n  }\n\n  async _setOffer(sessionDescription: RTCSessionDescription): Promise<void> {\n    try {\n      if (!this._pc) {\n        return;\n      }\n      await this._pc.setRemoteDescription(sessionDescription);\n      this._traceLog('set offer sdp=', sessionDescription.sdp);\n      await this._createAnswer();\n    } catch (error) {\n      await this._disconnect();\n      this._callbacks.disconnect({ reason: 'SET-OFFER-ERROR', error: error });\n    }\n  }\n\n  async _addIceCandidate(candidate: RTCIceCandidate): Promise<void> {\n    try {\n      if (this._pc) {\n        await this._pc.addIceCandidate(candidate);\n      }\n    } catch (_error) {\n      this._traceLog('invalid ice candidate', candidate);\n    }\n  }\n\n  _sendIceCandidate(candidate: RTCIceCandidate): void {\n    const message = { type: 'candidate', ice: candidate };\n    this._sendWs(message);\n  }\n\n  _sendSdp(sessionDescription: RTCSessionDescription): void {\n    this._sendWs(sessionDescription);\n  }\n\n  _sendWs(message: Record<string, any>) {\n    if (this._ws) {\n      this._ws.send(JSON.stringify(message));\n    }\n  }\n\n  _getTransceiver(pc: RTCPeerConnection, track: any): RTCRtpTransceiver | null {\n    let transceiver = null;\n    pc.getTransceivers().forEach((t: RTCRtpTransceiver) => {\n      if (t.sender == track || t.receiver == track) transceiver = t;\n    });\n    if (!transceiver) {\n      throw new Error('invalid transceiver');\n    }\n    return transceiver;\n  }\n\n  _findDataChannel(label: string): RTCDataChannel | undefined {\n    return this._dataChannels.find((channel) => channel.label == label);\n  }\n\n  async _closeDataChannel(dataChannel: RTCDataChannel): Promise<void> {\n    return new Promise((resolve) => {\n      if (dataChannel.readyState === 'closed') return resolve();\n      dataChannel.onclose = null;\n      const timerId = setInterval(() => {\n        if (dataChannel.readyState === 'closed') {\n          clearInterval(timerId);\n          return resolve();\n        }\n      }, 400);\n      dataChannel && dataChannel.close();\n    });\n  }\n\n  async _closePeerConnection(): Promise<void> {\n    return new Promise<void>((resolve) => {\n      if (browser() === 'safari' && this._pc) {\n        this._pc.oniceconnectionstatechange = () => {};\n        this._pc.close();\n        this._pc = null;\n        return resolve();\n      }\n      if (!this._pc) return resolve();\n      if (this._pc && this._pc.signalingState == 'closed') {\n        this._pc = null;\n        return resolve();\n      }\n      this._pc.oniceconnectionstatechange = () => {};\n      const timerId = setInterval(() => {\n        if (!this._pc) {\n          clearInterval(timerId);\n          return resolve();\n        }\n        if (this._pc && this._pc.signalingState == 'closed') {\n          this._pc = null;\n          clearInterval(timerId);\n          return resolve();\n        }\n      }, 400);\n      this._pc.close();\n    });\n  }\n\n  async _closeWebSocketConnection(): Promise<void> {\n    return new Promise<void>((resolve) => {\n      if (!this._ws) return resolve();\n      if (this._ws && this._ws.readyState === 3) {\n        this._ws = null;\n        return resolve();\n      }\n      this._ws.onclose = () => {};\n      const timerId = setInterval(() => {\n        if (!this._ws) {\n          clearInterval(timerId);\n          return resolve();\n        }\n        if (this._ws.readyState === 3) {\n          this._ws = null;\n          clearInterval(timerId);\n          return resolve();\n        }\n      }, 400);\n      this._ws && this._ws.close();\n    });\n  }\n\n  _traceLog(title: string, message?: Record<string, any> | string) {\n    if (!this.debug) return;\n    traceLog(title, message);\n  }\n}\n\nexport default ConnectionBase;\n","import ConnectionBase from './base';\nimport { ConnectionOptions, MetadataOption } from './options';\n\n/**\n * Peer Connection 接続を管理するクラスです。\n */\nclass Connection extends ConnectionBase {\n  /**\n   * @desc オブジェクトを生成し、リモートのピアまたはサーバーに接続します。\n   * @param {string} signalingUrl シグナリングに利用する URL\n   * @param {string} roomId Ayame のルームID\n   * @param {ConnectionOptions} options Ayame の接続オプション\n   * @param {boolean} [debug=false] デバッグログの出力可否\n   * @param {boolean} [isRelay=false] iceTransportPolicy を強制的に relay にするか\n   * @listens {open} Ayame Server に accept され、PeerConnection が生成されると送信されます。\n   * @listens {connect} PeerConnection が接続されると送信されます。\n   * @listens {disconnect} PeerConnection が切断されると送信されます。\n   * @listens {addstream} リモートのストリームが追加されると送信されます。\n   * @listens {removestream} リモートのストリームが削除されると送信されます。\n   */\n  constructor(signalingUrl: string, roomId: string, options: ConnectionOptions, debug = false, isRelay = false) {\n    super(signalingUrl, roomId, options, debug, isRelay);\n  }\n\n  /**\n   * @typedef {Object} MetadataOption - 接続時に指定できるメタデータです。\n   * @property {any} authnMetadata 送信するメタデータ\n   */\n\n  /**\n   * @desc PeerConnection  接続を開始します。\n   * @param {MediaStream|null} [stream=null] - ローカルのストリーム\n   * @param {MetadataOption|null} [metadataOption=null] - 送信するメタデータ\n   */\n  public async connect(stream: MediaStream | null, metadataOption: MetadataOption | null = null): Promise<void> {\n    if (this._ws || this._pc) {\n      this._traceLog('connection already exists');\n      throw new Error('Connection Already Exists!');\n    }\n    /** @type {MediaStream|null} */\n    this.stream = stream;\n    if (metadataOption) {\n      /** @type {any} */\n      this.authnMetadata = metadataOption.authnMetadata;\n    }\n    await this._signaling();\n  }\n\n  /**\n   * @desc Datachannel を作成します。\n   * @param {string} label - dataChannel の label\n   * @param {RTCDataChannelInit|undefined} [options=undefined] - dataChannel の init オプション\n   * @return {RTCDataChannel|null} 生成されたデータチャネル\n   */\n  public async createDataChannel(\n    label: string,\n    options: RTCDataChannelInit | undefined = undefined\n  ): Promise<RTCDataChannel | null> {\n    return await this._createDataChannel(label, options);\n  }\n\n  /**\n   * @desc Datachannel を削除します。\n   * @param {string} label - 削除する dataChannel の label\n   */\n  public async removeDataChannel(label: string): Promise<void> {\n    this._traceLog('datachannel remove=>', label);\n    const dataChannel = this._findDataChannel(label);\n    if (dataChannel && dataChannel.readyState === 'open') {\n      await this._closeDataChannel(dataChannel);\n    } else {\n      throw new Error('data channel is not exist or open');\n    }\n  }\n\n  /**\n   * @desc PeerConnection  接続を切断します。\n   */\n  public async disconnect(): Promise<void> {\n    if (this._ws) {\n      this._ws.close();\n    }\n\n    // standalone モードの場合はここで切断する\n    if (this.options.standalone) {\n      await this._disconnect();\n      this._callbacks.disconnect({ reason: 'DISCONNECTED' });\n    }\n  }\n}\n\nexport default Connection;\n","import Connection from './connection';\nimport { ConnectionOptions } from './connection/options';\nimport { randomString } from './utils';\n\n/**\n * オーディオ、ビデオの送受信方向に関するオプションです。\n * - sendrecv\n * - recvonly\n * - sendonly\n *\n * @typedef {string} ConnectionDirection\n */\n\n/**\n * @typedef {Object} ConnectionAudioOption - オーディオ接続に関するオプションです。\n * @property {ConnectionDirection} direction 送受信方向\n * @property {boolean} enabled 有効かどうかのフラグ\n */\n\n/**\n * ビデオ接続のコーデックに関するオプションです。\n * - VP8\n * - VP9\n * - AV1\n * - H264\n * - H265\n *\n * @typedef {string} VideoCodecOption\n */\n\n/**\n * @typedef {Object} ConnectionVideoOption - ビデオ接続に関するオプションです。\n * @property {VideoCodecOption} codec コーデックの設定\n * @property {ConnectionDirection} direction 送受信方向\n * @property {boolean} enabled 有効かどうかのフラグ\n */\n\n/**\n * @typedef {Object} ConnectionOptions - 接続時に指定するオプションです。\n * @property {ConnectionAudioOption} audio オーディオの設定\n * @property {ConnectionVideoOption} video ビデオの設定\n * @property {string} clientId クライアントID\n * @property {Array.<RTCIceServer>} iceServers ayame server から iceServers が返って来なかった場合に使われる iceServer の情報\n * @property {string} signalingKey 送信するシグナリングキー\n */\n\n/**\n * Ayame Connection のデフォルトのオプションです。\n *\n * audio: { direction: 'sendrecv', enabled: true}\n *\n * video: { direction: 'sendrecv', enabled: true}\n *\n * iceServers: []\n *\n * clientId: randomString(17)\n *\n * @type {ConnectionOptions} ConnectionOptions\n */\nexport const defaultOptions: ConnectionOptions = {\n  audio: { direction: 'sendrecv', enabled: true },\n  video: { direction: 'sendrecv', enabled: true },\n  iceServers: [],\n  clientId: randomString(17)\n};\n\n/**\n * @desc Ayame Connection を生成します。\n * @param {string} signalingUrl シグナリングに用いる websocket url\n * @param {string} roomId 接続する roomId\n * @param {ConnectionOptions} [options=defaultOptions] 接続時のオプション\n * @param {boolean} [debug=false] デバッグログを出力するかどうかのフラグ\n * @param {boolean} [isRelay=false] iceTranspolicy を強制的に relay するかどうかのフラグ(デバッグ用)\n * @return {Connection} 生成された Ayame Connection\n */\nexport function connection(\n  signalingUrl: string,\n  roomId: string,\n  options: ConnectionOptions = defaultOptions,\n  debug = false,\n  isRelay = false\n): Connection {\n  return new Connection(signalingUrl, roomId, options, debug, isRelay);\n}\n\n/**\n * @desc Ayame Web SDK のバージョンを出力します。\n * @return {string} Ayame Web SDK のバージョン\n */\nexport function version(): string {\n  return process.version;\n}\n"],"names":["g","f","exports","module","define","amd","globalThis","self","Ayame","this","browser","ua","window","navigator","userAgent","toLocaleLowerCase","indexOf","getVideoCodecsFromString","codec","codecs","mimeType","filteredCodecs","filter","c","length","Error","ConnectionBase","on","kind","callback","_callbacks","constructor","signalingUrl","roomId","options","debug","isRelay","_removeCodec","stream","remoteStream","_pc","_ws","authnMetadata","authzMetadata","_dataChannels","_isOffer","_isExistUser","connectionState","_pcConfig","iceServers","iceTransportPolicy","open","connect","disconnect","addstream","removestream","bye","datachannel","async","forEach","dataChannel","_closeDataChannel","_closePeerConnection","_closeWebSocketConnection","Promise","resolve","reject","WebSocket","onclose","standalone","_disconnect","reason","onerror","onopen","registerMessage","type","clientId","undefined","key","signalingKey","_sendWs","onmessage","event","data","message","JSON","parse","Array","isArray","_traceLog","isExistUser","_createPeerConnection","_sendOffer","signalingState","_setOffer","RTCSessionDescription","_setAnswer","ice","candidate","RTCIceCandidate","_addIceCandidate","error","pc","RTCPeerConnection","audioTrack","getAudioTracks","audio","direction","addTrack","enabled","addTransceiver","videoTrack","getVideoTracks","video","videoSender","videoTransceiver","_getTransceiver","_isVideoCodecSpecified","setCodecPreferences","videoCapabilities","RTCRtpSender","getCapabilities","videoCodecs","tracks","ontrack","callbackEvent","push","track","mediaStream","MediaStream","streams","onicecandidate","_sendIceCandidate","oniceconnectionstatechange","iceConnectionState","onconnectionstatechange","_","onsignalingstatechange","ondatachannel","_onDataChannel","bind","label","_findDataChannel","createDataChannel","channel","map","offer","createOffer","offerToReceiveAudio","offerToReceiveVideo","sdp","internalFunc","tmpSdp","codecre","RegExp","rtpmaps","match","rtpmap","modsdp","replace","rtcpre","fmtpre","aptpre","aptmaps","fmtpmap","rtppre","videore","videolines","videoelems","substring","split","modvideoline","videoelem","index","removeCodec","setLocalDescription","localDescription","_sendSdp","answer","createAnswer","sessionDescription","setRemoteDescription","_createAnswer","addIceCandidate","_error","send","stringify","transceiver","getTransceivers","t","sender","receiver","find","readyState","timerId","setInterval","clearInterval","close","title","value","prefix","performance","now","toFixed","console","log","info","traceLog","Connection","super","metadataOption","_signaling","_createDataChannel","defaultOptions","strLength","result","charSet","charAt","Math","floor","random","join","randomString","connection","version","process"],"mappings":"CAcA,SAAAA,EAAAC,GAAA,iBAAAC,SAAA,oBAAAC,OAAAF,EAAAC,SAAA,mBAAAE,QAAAA,OAAAC,IAAAD,OAAA,CAAA,WAAAH,GAAAA,GAAAD,EAAA,oBAAAM,WAAAA,WAAAN,GAAAO,MAAAC,MAAA,CAAA,EAAA,CAAA,CAAAC,MAAA,SAAAP,GAAA,sBAegBQ,IACd,MAAMC,EAAKC,OAAOC,UAAUC,UAAUC,oBACtC,OAA4B,IAAxBJ,EAAGK,QAAQ,QACN,QAC4B,IAA1BL,EAAGK,QAAQ,YAA4C,IAAxBL,EAAGK,QAAQ,QAC5C,UAC4B,IAA1BL,EAAGK,QAAQ,YAA8C,IAA1BL,EAAGK,QAAQ,UAC5C,UAC2B,IAAzBL,EAAGK,QAAQ,SACb,SAC6B,IAA3BL,EAAGK,QAAQ,WACb,UAEF,SACT,CAoBgB,SAAAC,EAAyBC,EAAyBC,GAChE,IAAIC,EAAW,GAEbA,EADY,QAAVF,EACS,YACQ,QAAVA,EACE,YACQ,SAAVA,EACE,aAEA,SAASA,IAEtB,MAAMG,EAA6BF,EAAOG,QAAQC,GAAMA,EAAEH,UAAYA,IACtE,GAAIC,EAAeG,OAAS,EAC1B,MAAM,IAAIC,MAAM,4BAElB,OAAOJ,CACT,CC5DA,MAAMK,EA0BJC,GAAGC,EAAcC,GACXD,KAAQnB,KAAKqB,aACfrB,KAAKqB,WAAWF,GAAQC,EAE3B,CAgBDE,YAAYC,EAAsBC,EAAgBC,EAA4BC,GAAQ,EAAOC,GAAU,GACrG3B,KAAK0B,MAAQA,EACb1B,KAAKwB,OAASA,EACdxB,KAAKuB,aAAeA,EACpBvB,KAAKyB,QAAUA,EACfzB,KAAK4B,cAAe,EACpB5B,KAAK6B,OAAS,KACd7B,KAAK8B,aAAe,KACpB9B,KAAK+B,IAAM,KACX/B,KAAKgC,IAAM,KACXhC,KAAKiC,cAAgB,KACrBjC,KAAKkC,cAAgB,KACrBlC,KAAKmC,cAAgB,GACrBnC,KAAKoC,UAAW,EAChBpC,KAAKqC,cAAe,EACpBrC,KAAKsC,gBAAkB,MACvBtC,KAAKuC,UAAY,CACfC,WAAYxC,KAAKyB,QAAQe,WACzBC,mBAAoBd,EAAU,QAAU,OAE1C3B,KAAKqB,WAAa,CAChBqB,KAAM,OACNC,QAAS,OACTC,WAAY,OACZC,UAAW,OACXC,aAAc,OACdC,IAAK,OACLC,YAAa,OAEhB,CAEDC,0BACQjD,KAAKmC,cAAce,SAAQD,MAAOE,UAChCnD,KAAKoD,kBAAkBD,EAAY,UAErCnD,KAAKqD,6BACLrD,KAAKsD,4BACXtD,KAAKkC,cAAgB,KACrBlC,KAAK4B,cAAe,EACpB5B,KAAKoC,UAAW,EAChBpC,KAAKqC,cAAe,EACpBrC,KAAKmC,cAAgB,GACrBnC,KAAKsC,gBAAkB,KACxB,CAEDW,mBACE,OAAO,IAAIM,SAAc,CAACC,EAASC,KACjC,GAAIzD,KAAKgC,IACP,OAAOyB,EAAO,qBAEhBzD,KAAKgC,IAAM,IAAI0B,UAAU1D,KAAKuB,cAC9BvB,KAAKgC,IAAI2B,QAAUV,UACjB,IAAKjD,KAAKyB,QAAQmC,WAGhB,aAFM5D,KAAK6D,cACX7D,KAAKqB,WAAWuB,WAAW,CAAEkB,OAAQ,cAC9BL,EAAO,YACf,EAEHzD,KAAKgC,IAAI+B,QAAUd,gBACXjD,KAAK6D,cACJJ,EAAO,yBAEhBzD,KAAKgC,IAAIgC,OAAS,KAChB,MAAMC,EAAwC,CAC5CC,KAAM,WACN1C,OAAQxB,KAAKwB,OACb2C,SAAUnE,KAAKyB,QAAQ0C,SACvBlC,mBAAemC,EACfC,SAAKD,EACLR,WAAY5D,KAAKyB,QAAQmC,YAEA,OAAvB5D,KAAKiC,gBACPgC,EAAgBhC,cAAgBjC,KAAKiC,eAEL,OAA9BjC,KAAKyB,QAAQ6C,eACfL,EAAgBI,IAAMrE,KAAKyB,QAAQ6C,cAErCtE,KAAKuE,QAAQN,GACTjE,KAAKgC,MACPhC,KAAKgC,IAAIwC,UAAYvB,MAAOwB,IAC1B,IACE,GAA0B,iBAAfA,EAAMC,KACf,OAEF,MAAMC,EAAUC,KAAKC,MAAMJ,EAAMC,MACjC,GAAqB,SAAjBC,EAAQT,KACVlE,KAAKuE,QAAQ,CAAEL,KAAM,aAChB,IAAqB,QAAjBS,EAAQT,KAEjB,OADAlE,KAAKqB,WAAW0B,IAAI0B,GACbjB,IACF,GAAqB,WAAjBmB,EAAQT,KAYjB,OAXAlE,KAAKkC,cAAgByC,EAAQzC,cACzB4C,MAAMC,QAAQJ,EAAQnC,aAAemC,EAAQnC,WAAWzB,OAAS,IACnEf,KAAKgF,UAAU,eAAgBL,EAAQnC,YACvCxC,KAAKuC,UAAUC,WAAamC,EAAQnC,YAEtCxC,KAAKgF,UAAU,gBAAiBL,EAAQM,aACxCjF,KAAKqC,aAAesC,EAAQM,YAC5BjF,KAAKkF,yBACqB,IAAtBlF,KAAKqC,oBACDrC,KAAKmF,aAEN3B,IACF,GAAqB,WAAjBmB,EAAQT,KAGjB,aAFMlE,KAAK6D,cACX7D,KAAKqB,WAAWuB,WAAW,CAAEkB,OAAQa,EAAQb,QAAU,aAChDL,EAAO,YACT,GAAqB,UAAjBkB,EAAQT,KACblE,KAAK+B,KAAmC,qBAA5B/B,KAAK+B,IAAIqD,gBACvBpF,KAAKkF,wBAEPlF,KAAKqF,UAAU,IAAIC,sBAAsBX,SACpC,GAAqB,WAAjBA,EAAQT,WACXlE,KAAKuF,WAAW,IAAID,sBAAsBX,SAC3C,GAAqB,cAAjBA,EAAQT,MACbS,EAAQa,IAAK,CACfxF,KAAKgF,UAAU,6BAA8BL,EAAQa,KACrD,MAAMC,EAAY,IAAIC,gBAAgBf,EAAQa,KAC9CxF,KAAK2F,iBAAiBF,EACvB,CACF,CAIF,CAHC,MAAOG,SACD5F,KAAK6D,cACX7D,KAAKqB,WAAWuB,WAAW,CAAEkB,OAAQ,kBAAmB8B,MAAOA,GAChE,GAEJ,CACF,GAEJ,CAEDV,wBACElF,KAAKgF,UAAU,qBAAsBhF,KAAKuC,WAC1C,MAAMsD,EAAK,IAAIC,kBAAkB9F,KAAKuC,WAChCwD,EAAa/F,KAAK6B,QAAU7B,KAAK6B,OAAOmE,iBAAiB,GAC3DD,GAA+C,aAAjC/F,KAAKyB,QAAQwE,MAAMC,UACnCL,EAAGM,SAASJ,EAAY/F,KAAK6B,QACpB7B,KAAKyB,QAAQwE,MAAMG,SAC5BP,EAAGQ,eAAe,QAAS,CAAEH,UAAW,aAE1C,MAAMI,EAAatG,KAAK6B,QAAU7B,KAAK6B,OAAO0E,iBAAiB,GAC/D,GAAID,GAA+C,aAAjCtG,KAAKyB,QAAQ+E,MAAMN,UAA0B,CAC7D,MAAMO,EAAcZ,EAAGM,SAASG,EAAYtG,KAAK6B,QAC3C6E,EAAmB1G,KAAK2G,gBAAgBd,EAAIY,GAClD,GAAIzG,KAAK4G,0BAAiD,OAArBF,EACnC,QAAoD,IAAzCA,EAAiBG,oBAAqC,CAC/D,MAAMC,EAAoBC,aAAaC,gBAAgB,SACvD,GAAIF,EAAmB,CACrB,IAAIG,EAAc,GACdjH,KAAKyB,QAAQ+E,MAAM/F,QACrBwG,EAAczG,EAAyBR,KAAKyB,QAAQ+E,MAAM/F,MAAOqG,EAAkBpG,SAErFV,KAAKgF,UAAU,gBAAiBiC,GAChCP,EAAiBG,oBAAoBI,EACtC,CACF,MACCjH,KAAK4B,cAAe,CAGzB,MAAM,GAAI5B,KAAKyB,QAAQ+E,MAAMJ,QAAS,CACrC,MAAMM,EAAmBb,EAAGQ,eAAe,QAAS,CAAEH,UAAW,aACjE,GAAIlG,KAAK4G,yBACP,QAAoD,IAAzCF,EAAiBG,oBAAqC,CAC/D,MAAMC,EAAoBC,aAAaC,gBAAgB,SACvD,GAAIF,EAAmB,CACrB,IAAIG,EAAc,GACdjH,KAAKyB,QAAQ+E,MAAM/F,QACrBwG,EAAczG,EAAyBR,KAAKyB,QAAQ+E,MAAM/F,MAAOqG,EAAkBpG,SAErFV,KAAKgF,UAAU,gBAAiBiC,GAChCP,EAAiBG,oBAAoBI,EACtC,CACF,MACCjH,KAAK4B,cAAe,CAGzB,CACD,MAAMsF,EAAkC,GACxCrB,EAAGsB,QAAW1C,IACZ,MAAM2C,EAAqB3C,EAE3B,GADAzE,KAAKgF,UAAU,iBAAkBP,GACf,WAAdxE,IAAwB,CAC1BiH,EAAOG,KAAK5C,EAAM6C,OAClB,MAAMC,EAAc,IAAIC,YAAYN,GACpClH,KAAK8B,aAAeyF,CACrB,MACCvH,KAAK8B,aAAe2C,EAAMgD,QAAQ,GAEpCL,EAAcvF,OAAS7B,KAAK8B,aAC5B9B,KAAKqB,WAAWwB,UAAUuE,EAAc,EAE1CvB,EAAG6B,eAAkBjD,IACnBzE,KAAKgF,UAAU,wBAAyBP,GACpCA,EAAMgB,UACRzF,KAAK2H,kBAAkBlD,EAAMgB,WAE7BzF,KAAKgF,UAAU,kBAAmB,GACnC,EAEHa,EAAG+B,2BAA6B3E,UAE9B,GADAjD,KAAKgF,UAAU,wCAAyCa,EAAGgC,oBACvD7H,KAAKsC,kBAAoBuD,EAAGgC,mBAE9B,OADA7H,KAAKsC,gBAAkBuD,EAAGgC,mBAClB7H,KAAKsC,iBACX,IAAK,YACHtC,KAAKoC,UAAW,EAChBpC,KAAKqB,WAAWsB,UAChB,MACF,IAAK,eACL,IAAK,eACG3C,KAAK6D,cACX7D,KAAKqB,WAAWuB,WAAW,CAAEkB,OAAQ,gCAG1C,EAEH+B,EAAGiC,wBAA2BC,IACD,cAAvBlC,EAAGvD,iBACDtC,KAAKyB,QAAQmC,YACf5D,KAAKuE,QAAQ,CAAEL,KAAM,aAExB,EAEH2B,EAAGmC,uBAA0BD,IAC3B/H,KAAKgF,UAAU,2BAA4Ba,EAAGT,eAAe,EAE/DS,EAAGoC,cAAgBjI,KAAKkI,eAAeC,KAAKnI,MACvCA,KAAK+B,IAIR/B,KAAK+B,IAAM8D,GAHX7F,KAAK+B,IAAM8D,EACX7F,KAAKqB,WAAWqB,KAAK,CAAER,cAAelC,KAAKkC,gBAI9C,CAEDe,yBAAyBmF,EAAe3G,GACtC,OAAO,IAAI8B,SAA+B,CAACC,EAASC,KAClD,IAAKzD,KAAK+B,IAAK,OAAO0B,EAAO,iCAC7B,GAAIzD,KAAKoC,SAAU,OAAOqB,EAAO,kCACjC,IAAIN,EAAcnD,KAAKqI,iBAAiBD,GACxC,OAAIjF,EACKM,EAAO,+BAEZzD,KAAKqC,cACPc,EAAcnD,KAAK+B,IAAIuG,kBAAkBF,EAAO3G,GAChD0B,EAAYQ,QAAWc,IACrBzE,KAAKgF,UAAU,yBAA0BP,GACzCzE,KAAKmC,cAAgBnC,KAAKmC,cAActB,QAAQsC,GAAgBA,EAAYiF,OAASA,GAAM,EAE7FjF,EAAYY,QAAWU,IACrBzE,KAAKgF,UAAU,wBAAyBP,GACxCzE,KAAKmC,cAAgBnC,KAAKmC,cAActB,QAAQsC,GAAgBA,EAAYiF,OAASA,GAAM,EAE7FjF,EAAYqB,UAAaC,IACvBzE,KAAKgF,UAAU,0BAA2BP,EAAMC,MAChDD,EAAM2D,MAAQA,CAAK,EAErBjF,EAAYa,OAAUS,IACpBzE,KAAKgF,UAAU,uBAAwBP,EAAM,EAE/CzE,KAAKmC,cAAckF,KAAKlE,GACjBK,EAAQL,IAEVK,EAAQ,KAAK,GAEvB,CAED0E,eAAezD,GAEb,GADAzE,KAAKgF,UAAU,kBAAmBP,IAC7BzE,KAAK+B,IAAK,OACf,MAAMoB,EAAcsB,EAAM8D,QACpBH,EAAQ3D,EAAM8D,QAAQH,MACvB3D,EAAM8D,WACNH,GAASA,EAAMrH,OAAS,IAC7BoC,EAAYa,OAASf,MAAOwB,IAC1BzE,KAAKgF,UAAU,uBAAwBP,EAAM,EAE/CtB,EAAYQ,QAAUV,MAAOwB,IAC3BzE,KAAKgF,UAAU,yBAA0BP,EAAM,EAEjDtB,EAAYY,QAAUd,MAAOwB,IAC3BzE,KAAKgF,UAAU,wBAAyBP,EAAM,EAEhDtB,EAAYqB,UAAaC,IACvBzE,KAAKgF,UAAU,0BAA2BP,EAAMC,MAChDD,EAAM2D,MAAQA,CAAK,EAEhBpI,KAAKqI,iBAAiBD,GAGzBpI,KAAKmC,cAAgBnC,KAAKmC,cAAcqG,KAAKD,GACvCA,EAAQH,OAASA,EACZjF,EAEAoF,IANXvI,KAAKmC,cAAckF,KAAK5C,EAAM8D,SAUhCvI,KAAKqB,WAAW2B,YAAYG,IAC7B,CAEDF,mBACE,IAAKjD,KAAK+B,IACR,OAEgB,WAAd9B,MACED,KAAKyB,QAAQ+E,MAAMJ,SAA4C,aAAjCpG,KAAKyB,QAAQ+E,MAAMN,WACnDlG,KAAK+B,IAAIsE,eAAe,QAAS,CAAEH,UAAW,aAE5ClG,KAAKyB,QAAQwE,MAAMG,SAA4C,aAAjCpG,KAAKyB,QAAQwE,MAAMC,WACnDlG,KAAK+B,IAAIsE,eAAe,QAAS,CAAEH,UAAW,cAGlD,MAAMuC,QAAmBzI,KAAK+B,IAAI2G,YAAY,CAC5CC,oBAAqB3I,KAAKyB,QAAQwE,MAAMG,SAA4C,aAAjCpG,KAAKyB,QAAQwE,MAAMC,UACtE0C,oBAAqB5I,KAAKyB,QAAQ+E,MAAMJ,SAA4C,aAAjCpG,KAAKyB,QAAQ+E,MAAMN,YAExE,GAAIlG,KAAK4B,cAAgB5B,KAAKyB,QAAQ+E,MAAM/F,MAAO,CACT,CAAC,MAAO,MAAO,QAChDyC,SAASzC,IACVT,KAAKyB,QAAQ+E,MAAM/F,QAAUA,IAC/BgI,EAAMI,ID9SA,SAAYA,EAAapI,GA+CvC,OA9CA,SAASqI,EAAaC,GAEpB,MAAMC,EAAU,IAAIC,OAAO,oBAAsBxI,EAAQ,iBACnDyI,EAAUH,EAAOI,MAAMH,GAC7B,GAAe,MAAXE,GAAmBA,EAAQnI,QAAU,EACvC,OAAO8H,EAET,MAAMO,EAASF,EAAQ,GACvB,IAAIG,EAASN,EAAOO,QAAQN,EAAS,IAErC,MAAMO,EAAS,IAAIN,OAAO,cAAgBG,EAAS,UAAW,KAC9DC,EAASA,EAAOC,QAAQC,EAAQ,IAEhC,MAAMC,EAAS,IAAIP,OAAO,WAAaG,EAAS,UAAW,KAC3DC,EAASA,EAAOC,QAAQE,EAAQ,IAEhC,MAAMC,EAAS,IAAIR,OAAO,sBAAwBG,EAAS,WACrDM,EAAUL,EAAOF,MAAMM,GAC7B,IAAIE,EAAU,GACd,GAAe,MAAXD,GAAmBA,EAAQ3I,QAAU,EAAG,CAC1C4I,EAAUD,EAAQ,GAClBL,EAASA,EAAOC,QAAQG,EAAQ,IAEhC,MAAMG,EAAS,IAAIX,OAAO,aAAeU,EAAU,UAAW,KAC9DN,EAASA,EAAOC,QAAQM,EAAQ,GACjC,CAED,MAAMC,EAAU,kBACVC,EAAaT,EAAOF,MAAMU,GAChC,GAAkB,MAAdC,EAAoB,CAEtB,MACMC,EADYD,EAAW,GAAGE,UAAU,EAAGF,EAAW,GAAG/I,OAAS,GACvCkJ,MAAM,KACnC,IAAIC,EAAeH,EAAW,GAC9BA,EAAW7G,SAAQ,CAACiH,EAAWC,KACf,IAAVA,GACAD,GAAaf,GAAUe,GAAaR,IAGxCO,GAAgB,IAAMC,EAAS,IAEjCD,GAAgB,OAChBb,EAASA,EAAOC,QAAQO,EAASK,EAClC,CACD,OAAOpB,EAAaO,EACrB,CACMP,CAAaD,EACtB,CC8PsBwB,CAAY5B,EAAMI,IAAKpI,GACpC,GAEJ,CACDT,KAAKgF,UAAU,yBAA0ByD,EAAMI,WACzC7I,KAAK+B,IAAIuI,oBAAoB7B,GAC/BzI,KAAK+B,IAAIwI,kBACXvK,KAAKwK,SAASxK,KAAK+B,IAAIwI,kBAEzBvK,KAAKoC,UAAW,CACjB,CAEDwE,yBACE,OAAO5G,KAAKyB,QAAQ+E,MAAMJ,SAAwC,OAA7BpG,KAAKyB,QAAQ+E,MAAM/F,KACzD,CAEDwC,sBACE,GAAKjD,KAAK+B,IAGV,IACE,MAAM0I,QAAezK,KAAK+B,IAAI2I,eAC9B1K,KAAKgF,UAAU,0BAA2ByF,EAAO5B,WAC3C7I,KAAK+B,IAAIuI,oBAAoBG,GAC/BzK,KAAK+B,IAAIwI,kBAAkBvK,KAAKwK,SAASxK,KAAK+B,IAAIwI,iBAIvD,CAHC,MAAO3E,SACD5F,KAAK6D,cACX7D,KAAKqB,WAAWuB,WAAW,CAAEkB,OAAQ,sBAAuB8B,MAAOA,GACpE,CACF,CAED3C,iBAAiB0H,GACV3K,KAAK+B,YAGJ/B,KAAK+B,IAAI6I,qBAAqBD,GACpC3K,KAAKgF,UAAU,kBAAmB2F,EAAmB9B,KACtD,CAED5F,gBAAgB0H,GACd,IACE,IAAK3K,KAAK+B,IACR,aAEI/B,KAAK+B,IAAI6I,qBAAqBD,GACpC3K,KAAKgF,UAAU,iBAAkB2F,EAAmB9B,WAC9C7I,KAAK6K,eAIZ,CAHC,MAAOjF,SACD5F,KAAK6D,cACX7D,KAAKqB,WAAWuB,WAAW,CAAEkB,OAAQ,kBAAmB8B,MAAOA,GAChE,CACF,CAED3C,uBAAuBwC,GACrB,IACMzF,KAAK+B,WACD/B,KAAK+B,IAAI+I,gBAAgBrF,EAIlC,CAFC,MAAOsF,GACP/K,KAAKgF,UAAU,wBAAyBS,EACzC,CACF,CAEDkC,kBAAkBlC,GAChB,MAAMd,EAAU,CAAET,KAAM,YAAasB,IAAKC,GAC1CzF,KAAKuE,QAAQI,EACd,CAED6F,SAASG,GACP3K,KAAKuE,QAAQoG,EACd,CAEDpG,QAAQI,GACF3E,KAAKgC,KACPhC,KAAKgC,IAAIgJ,KAAKpG,KAAKqG,UAAUtG,GAEhC,CAEDgC,gBAAgBd,EAAuByB,GACrC,IAAI4D,EAAc,KAIlB,GAHArF,EAAGsF,kBAAkBjI,SAASkI,IACxBA,EAAEC,QAAU/D,GAAS8D,EAAEE,UAAYhE,IAAO4D,EAAcE,EAAC,KAE1DF,EACH,MAAM,IAAIlK,MAAM,uBAElB,OAAOkK,CACR,CAED7C,iBAAiBD,GACf,OAAOpI,KAAKmC,cAAcoJ,MAAMhD,GAAYA,EAAQH,OAASA,GAC9D,CAEDnF,wBAAwBE,GACtB,OAAO,IAAII,SAASC,IAClB,GAA+B,WAA3BL,EAAYqI,WAAyB,OAAOhI,IAChDL,EAAYQ,QAAU,KACtB,MAAM8H,EAAUC,aAAY,KAC1B,GAA+B,WAA3BvI,EAAYqI,WAEd,OADAG,cAAcF,GACPjI,GACR,GACA,KACHL,GAAeA,EAAYyI,OAAO,GAErC,CAED3I,6BACE,OAAO,IAAIM,SAAeC,IACxB,GAAkB,WAAdvD,KAA0BD,KAAK+B,IAIjC,OAHA/B,KAAK+B,IAAI6F,2BAA6B,OACtC5H,KAAK+B,IAAI6J,QACT5L,KAAK+B,IAAM,KACJyB,IAET,IAAKxD,KAAK+B,IAAK,OAAOyB,IACtB,GAAIxD,KAAK+B,KAAkC,UAA3B/B,KAAK+B,IAAIqD,eAEvB,OADApF,KAAK+B,IAAM,KACJyB,IAETxD,KAAK+B,IAAI6F,2BAA6B,OACtC,MAAM6D,EAAUC,aAAY,IACrB1L,KAAK+B,IAIN/B,KAAK+B,KAAkC,UAA3B/B,KAAK+B,IAAIqD,gBACvBpF,KAAK+B,IAAM,KACX4J,cAAcF,GACPjI,UAHT,GAHEmI,cAAcF,GACPjI,MAOR,KACHxD,KAAK+B,IAAI6J,OAAO,GAEnB,CAED3I,kCACE,OAAO,IAAIM,SAAeC,IACxB,IAAKxD,KAAKgC,IAAK,OAAOwB,IACtB,GAAIxD,KAAKgC,KAA+B,IAAxBhC,KAAKgC,IAAIwJ,WAEvB,OADAxL,KAAKgC,IAAM,KACJwB,IAETxD,KAAKgC,IAAI2B,QAAU,OACnB,MAAM8H,EAAUC,aAAY,IACrB1L,KAAKgC,IAIkB,IAAxBhC,KAAKgC,IAAIwJ,YACXxL,KAAKgC,IAAM,KACX2J,cAAcF,GACPjI,UAHT,GAHEmI,cAAcF,GACPjI,MAOR,KACHxD,KAAKgC,KAAOhC,KAAKgC,IAAI4J,OAAO,GAE/B,CAED5G,UAAU6G,EAAelH,GAClB3E,KAAK0B,ODlfE,SAASmK,EAAeC,GACtC,IAAIC,EAAS,GACT5L,OAAO6L,cACTD,EAAS,WAAa5L,OAAO6L,YAAYC,MAAQ,KAAMC,QAAQ,GAAK,KAEpD,SAAdjM,IACFkM,QAAQC,IAAIL,EAAS,IAAMF,EAAQ,KAAMC,GAEzCK,QAAQE,KAAKN,EAAS,IAAMF,EAAQ,KAAMC,EAE9C,CCyeIQ,CAAST,EAAOlH,EACjB,EC9hBH,MAAM4H,UAAmBtL,EAcvBK,YAAYC,EAAsBC,EAAgBC,EAA4BC,GAAQ,EAAOC,GAAU,GACrG6K,MAAMjL,EAAcC,EAAQC,EAASC,EAAOC,EAC7C,CAYMsB,cAAcpB,EAA4B4K,EAAwC,MACvF,GAAIzM,KAAKgC,KAAOhC,KAAK+B,IAEnB,MADA/B,KAAKgF,UAAU,6BACT,IAAIhE,MAAM,8BAGlBhB,KAAK6B,OAASA,EACV4K,IAEFzM,KAAKiC,cAAgBwK,EAAexK,qBAEhCjC,KAAK0M,YACZ,CAQMzJ,wBACLmF,EACA3G,GAEA,aAAazB,KAAK2M,mBAAmBvE,EAAO3G,EAC7C,CAMMwB,wBAAwBmF,GAC7BpI,KAAKgF,UAAU,uBAAwBoD,GACvC,MAAMjF,EAAcnD,KAAKqI,iBAAiBD,GAC1C,IAAIjF,GAA0C,SAA3BA,EAAYqI,WAG7B,MAAM,IAAIxK,MAAM,2CAFVhB,KAAKoD,kBAAkBD,EAIhC,CAKMF,mBACDjD,KAAKgC,KACPhC,KAAKgC,IAAI4J,QAIP5L,KAAKyB,QAAQmC,mBACT5D,KAAK6D,cACX7D,KAAKqB,WAAWuB,WAAW,CAAEkB,OAAQ,iBAExC,EC7BU,MAAA8I,EAAoC,CAC/C3G,MAAO,CAAEC,UAAW,WAAYE,SAAS,GACzCI,MAAO,CAAEN,UAAW,WAAYE,SAAS,GACzC5D,WAAY,GACZ2B,SH9CI,SAAuB0I,GAC3B,MAAMC,EAAS,GACTC,EAAU,aAChB,KAAOF,KACLC,EAAOzF,KAAK0F,EAAQC,OAAOC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAQhM,UAEhE,OAAO+L,EAAOM,KAAK,GACrB,CGuCYC,CAAa,KA4BzB5N,EAAA6N,oBAfE/L,EACAC,EACAC,EAA6BmL,EAC7BlL,GAAQ,EACRC,GAAU,GAEV,OAAO,IAAI4K,EAAWhL,EAAcC,EAAQC,EAASC,EAAOC,EAC9D,EAQAlC,EAAAmN,eAAAA,EAAAnN,EAAA8N,mBADE,OAAOC,QAAQD,OACjB,CAAA"}