{"version":3,"file":"ayame.min.js","sources":["../src/utils.ts","../src/connection/index.ts","../src/connection/base.ts","../src/ayame.ts"],"sourcesContent":["import { VideoCodecOption } from './connection/options';\n\n/**\n * @ignore\n */\ninterface Window {\n  performance: WindowPerformance;\n  navigator: any;\n}\ninterface WindowPerformance {\n  now(): number;\n}\ndeclare let window: Window;\n\n/**\n * @ignore\n */\nexport function randomString(strLength: number): string {\n  const result = [];\n  const charSet = '0123456789';\n  while (strLength--) {\n    result.push(charSet.charAt(Math.floor(Math.random() * charSet.length)));\n  }\n  return result.join('');\n}\n\n/**\n * @ignore\n */\nexport function browser(): string {\n  const ua = window.navigator.userAgent.toLocaleLowerCase();\n  if (ua.indexOf('edge') !== -1) {\n    return 'edge';\n  } else if (ua.indexOf('chrome') !== -1 && ua.indexOf('edge') === -1) {\n    return 'chrome';\n  } else if (ua.indexOf('safari') !== -1 && ua.indexOf('chrome') === -1) {\n    return 'safari';\n  } else if (ua.indexOf('opera') !== -1) {\n    return 'opera';\n  } else if (ua.indexOf('firefox') !== -1) {\n    return 'firefox';\n  }\n  return 'unknown';\n}\n\n/**\n * @ignore\n */\nexport function traceLog(title: string, value?: string | Record<string, any>): void {\n  let prefix = '';\n  if (window.performance) {\n    prefix = '[Ayame ' + (window.performance.now() / 1000).toFixed(3) + ']';\n  }\n  if (browser() === 'edge') {\n    console.log(prefix + ' ' + title + '\\n', value);\n  } else {\n    console.info(prefix + ' ' + title + '\\n', value);\n  }\n}\n\n// Stack Overflow より引用: https://stackoverflow.com/a/52760103\n// https://stackoverflow.com/questions/52738290/how-to-remove-video-codecs-in-webrtc-sdp\n/** @private */\nexport function getVideoCodecsFromString(codec: VideoCodecOption, codecs: Array<any>): Array<any> {\n  let mimeType = '';\n  if (codec === 'VP8') {\n    mimeType = 'video/VP8';\n  } else if (codec === 'VP9') {\n    mimeType = 'video/VP9';\n  } else if (codec === 'H264') {\n    mimeType = 'video/H264';\n  } else {\n    mimeType = `video/${codec}`;\n  }\n  const filteredCodecs: Array<any> = codecs.filter(c => c.mimeType == mimeType);\n  if (filteredCodecs.length < 1) {\n    throw new Error('invalid video codec type');\n  }\n  return filteredCodecs;\n}\n\n/**\n * @ignore\n */\nexport function removeCodec(sdp: string, codec: VideoCodecOption): string {\n  function internalFunc(tmpSdp: string): string {\n    // eslint-disable-next-line no-useless-escape\n    const codecre = new RegExp('(a=rtpmap:(\\\\d*) ' + codec + '/90000\\\\r\\\\n)');\n    const rtpmaps = tmpSdp.match(codecre);\n    if (rtpmaps == null || rtpmaps.length <= 2) {\n      return sdp;\n    }\n    const rtpmap = rtpmaps[2];\n    let modsdp = tmpSdp.replace(codecre, '');\n\n    const rtcpre = new RegExp('(a=rtcp-fb:' + rtpmap + '.*\\r\\n)', 'g');\n    modsdp = modsdp.replace(rtcpre, '');\n\n    const fmtpre = new RegExp('(a=fmtp:' + rtpmap + '.*\\r\\n)', 'g');\n    modsdp = modsdp.replace(fmtpre, '');\n\n    const aptpre = new RegExp('(a=fmtp:(\\\\d*) apt=' + rtpmap + '\\\\r\\\\n)');\n    const aptmaps = modsdp.match(aptpre);\n    let fmtpmap = '';\n    if (aptmaps != null && aptmaps.length >= 3) {\n      fmtpmap = aptmaps[2];\n      modsdp = modsdp.replace(aptpre, '');\n\n      const rtppre = new RegExp('(a=rtpmap:' + fmtpmap + '.*\\r\\n)', 'g');\n      modsdp = modsdp.replace(rtppre, '');\n    }\n\n    const videore = /(m=video.*\\r\\n)/;\n    const videolines = modsdp.match(videore);\n    if (videolines != null) {\n      //If many m=video are found in SDP, this program doesn't work.\n      const videoline = videolines[0].substring(0, videolines[0].length - 2);\n      const videoelems = videoline.split(' ');\n      let modvideoline = videoelems[0];\n      videoelems.forEach((videoelem, index) => {\n        if (index === 0) return;\n        if (videoelem == rtpmap || videoelem == fmtpmap) {\n          return;\n        }\n        modvideoline += ' ' + videoelem;\n      });\n      modvideoline += '\\r\\n';\n      modsdp = modsdp.replace(videore, modvideoline);\n    }\n    return internalFunc(modsdp);\n  }\n  return internalFunc(sdp);\n}\n","import ConnectionBase from './base';\nimport { ConnectionOptions, MetadataOption } from './options';\n\n/**\n * Peer Connection 接続を管理するクラスです。\n */\nclass Connection extends ConnectionBase {\n  /**\n   * @desc オブジェクトを生成し、リモートのピアまたはサーバーに接続します。\n   * @param {string} signalingUrl シグナリングに利用する URL\n   * @param {string} roomId Ayame のルームID\n   * @param {ConnectionOptions} options Ayame の接続オプション\n   * @param {boolean} [debug=false] デバッグログの出力可否\n   * @param {boolean} [isRelay=false] iceTransportPolicy を強制的に relay にするか\n   * @listens {open} Ayame Server に accept され、PeerConnection が生成されると送信されます。\n   * @listens {connect} PeerConnection が接続されると送信されます。\n   * @listens {disconnect} PeerConnection が切断されると送信されます。\n   * @listens {addstream} リモートのストリームが追加されると送信されます。\n   * @listens {removestream} リモートのストリームが削除されると送信されます。\n   */\n  constructor(signalingUrl: string, roomId: string, options: ConnectionOptions, debug = false, isRelay = false) {\n    super(signalingUrl, roomId, options, debug, isRelay);\n  }\n\n  /**\n   * @typedef {Object} MetadataOption - 接続時に指定できるメタデータです。\n   * @property {any} authnMetadata 送信するメタデータ\n   */\n\n  /**\n   * @desc PeerConnection  接続を開始します。\n   * @param {MediaStream|null} [stream=null] - ローカルのストリーム\n   * @param {MetadataOption|null} [metadataOption=null] - 送信するメタデータ\n   */\n  public async connect(stream: MediaStream | null, metadataOption: MetadataOption | null = null): Promise<void> {\n    if (this._ws || this._pc) {\n      this._traceLog('connection already exists');\n      throw new Error('Connection Already Exists!');\n    }\n    /** @type {MediaStream|null} */\n    this.stream = stream;\n    if (metadataOption) {\n      /** @type {any} */\n      this.authnMetadata = metadataOption.authnMetadata;\n    }\n    await this._signaling();\n  }\n\n  /**\n   * @desc Datachannel を作成します。\n   * @param {string} label - dataChannel の label\n   * @param {RTCDataChannelInit|undefined} [options=undefined] - dataChannel の init オプション\n   * @return {RTCDataChannel|null} 生成されたデータチャネル\n   */\n  public async createDataChannel(\n    label: string,\n    options: RTCDataChannelInit | undefined = undefined\n  ): Promise<RTCDataChannel | null> {\n    return await this._createDataChannel(label, options);\n  }\n\n  /**\n   * @desc Datachannel を削除します。\n   * @param {string} label - 削除する dataChannel の label\n   */\n  public async removeDataChannel(label: string): Promise<void> {\n    this._traceLog('datachannel remove=>', label);\n    const dataChannel = this._findDataChannel(label);\n    if (dataChannel && dataChannel.readyState === 'open') {\n      await this._closeDataChannel(dataChannel);\n    } else {\n      throw new Error('data channel is not exist or open');\n    }\n  }\n\n  /**\n   * @desc PeerConnection  接続を切断します。\n   */\n  public async disconnect(): Promise<void> {\n    return new Promise(resolve => {\n      if (this._ws) {\n        this._ws.close();\n      }\n      return resolve();\n    });\n  }\n}\n\nexport default Connection;\n","/* @private */\nimport { traceLog, getVideoCodecsFromString, removeCodec, browser } from '../utils';\nimport { ConnectionOptions, VideoCodecOption } from './options';\n\n/**\n * @ignore\n */\ninterface AyameRegisterMessage {\n  type: string;\n  roomId: string;\n  clientId: string;\n  key?: string;\n  authnMetadata?: any;\n}\n\n/**\n * @ignore\n */\nclass ConnectionBase {\n  debug: boolean;\n  roomId: string;\n  signalingUrl: string;\n  options: ConnectionOptions;\n  connectionState: string;\n  stream: MediaStream | null;\n  remoteStream: MediaStream | null;\n  authnMetadata: any;\n  authzMetadata: any;\n  _ws: WebSocket | null;\n  _pc: RTCPeerConnection | null;\n  _callbacks: any;\n  _removeCodec: boolean;\n  _isOffer: boolean;\n  _isExistUser: boolean;\n  _dataChannels: Array<RTCDataChannel>;\n  _pcConfig: {\n    iceServers: Array<RTCIceServer>;\n    iceTransportPolicy: RTCIceTransportPolicy;\n  };\n\n  /**\n   * @ignore\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  on(kind: string, callback: Function): void {\n    if (kind in this._callbacks) {\n      this._callbacks[kind] = callback;\n    }\n  }\n\n  /**\n   * オブジェクトを生成し、リモートのピアまたはサーバーに接続します。\n   * @param signalingUrl シグナリングに利用する URL\n   * @param roomId Ayame のルームID\n   * @param options Ayame の接続オプション\n   * @param [debug=false] デバッグログの出力可否\n   * @param [isRelay=false] iceTransportPolicy を強制的に relay にするか\n   * @listens {open} Ayame Server に accept され、PeerConnection が生成されると送信されます。\n   * @listens {connect} PeerConnection が接続されると送信されます。\n   * @listens {disconnect} PeerConnection が切断されると送信されます。\n   * @listens {addstream} リモートのストリームが追加されると送信されます。\n   * @listens {removestream} リモートのストリームが削除されると送信されます。\n   * @listens {bye} Ayame Server から bye を受信すると送信されます。\n   */\n  constructor(signalingUrl: string, roomId: string, options: ConnectionOptions, debug = false, isRelay = false) {\n    this.debug = debug;\n    this.roomId = roomId;\n    this.signalingUrl = signalingUrl;\n    this.options = options;\n    this._removeCodec = false;\n    this.stream = null;\n    this.remoteStream = null;\n    this._pc = null;\n    this._ws = null;\n    this.authnMetadata = null;\n    this.authzMetadata = null;\n    this._dataChannels = [];\n    this._isOffer = false;\n    this._isExistUser = false;\n    this.connectionState = 'new';\n    this._pcConfig = {\n      iceServers: this.options.iceServers,\n      iceTransportPolicy: isRelay ? 'relay' : 'all'\n    };\n    this._callbacks = {\n      open: () => {},\n      connect: () => {},\n      disconnect: () => {},\n      addstream: () => {},\n      removestream: () => {},\n      bye: () => {},\n      datachannel: () => {}\n    };\n  }\n\n  async _disconnect(): Promise<void> {\n    await this._dataChannels.forEach(async (dataChannel: RTCDataChannel) => {\n      await this._closeDataChannel(dataChannel);\n    });\n    await this._closePeerConnection();\n    await this._closeWebSocketConnection();\n    this.authzMetadata = null;\n    this._removeCodec = false;\n    this._isOffer = false;\n    this._isExistUser = false;\n    this._dataChannels = [];\n    this.connectionState = 'new';\n  }\n\n  async _signaling(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      if (this._ws) {\n        return reject('WS-ALREADY-EXISTS');\n      }\n      this._ws = new WebSocket(this.signalingUrl);\n      this._ws.onclose = async () => {\n        await this._disconnect();\n        this._callbacks.disconnect({ reason: 'WS-CLOSED' });\n        return reject('WS-CLOSED');\n      };\n      this._ws.onerror = async () => {\n        await this._disconnect();\n        return reject('WS-CLOSED-WITH-ERROR');\n      };\n      this._ws.onopen = () => {\n        const registerMessage: AyameRegisterMessage = {\n          type: 'register',\n          roomId: this.roomId,\n          clientId: this.options.clientId,\n          authnMetadata: undefined,\n          key: undefined\n        };\n        if (this.authnMetadata !== null) {\n          registerMessage.authnMetadata = this.authnMetadata;\n        }\n        if (this.options.signalingKey !== null) {\n          registerMessage.key = this.options.signalingKey;\n        }\n        this._sendWs(registerMessage);\n        if (this._ws) {\n          this._ws.onmessage = async (event: MessageEvent) => {\n            try {\n              if (typeof event.data !== 'string') {\n                return;\n              }\n              const message = JSON.parse(event.data);\n              if (message.type === 'ping') {\n                this._sendWs({ type: 'pong' });\n              } else if (message.type === 'bye') {\n                this._callbacks.bye(event);\n                return resolve();\n              } else if (message.type === 'accept') {\n                this.authzMetadata = message.authzMetadata;\n                if (Array.isArray(message.iceServers) && message.iceServers.length > 0) {\n                  this._traceLog('iceServers=>', message.iceServers);\n                  this._pcConfig.iceServers = message.iceServers;\n                }\n                this._traceLog('isExistUser=>', message.isExistUser);\n                this._isExistUser = message.isExistUser;\n                this._createPeerConnection();\n                if (this._isExistUser === true) {\n                  await this._sendOffer();\n                }\n                return resolve();\n              } else if (message.type === 'reject') {\n                await this._disconnect();\n                this._callbacks.disconnect({ reason: message.reason || 'REJECTED' });\n                return reject('REJECTED');\n              } else if (message.type === 'offer') {\n                if (this._pc && this._pc.signalingState === 'have-local-offer') {\n                  this._createPeerConnection();\n                }\n                this._setOffer(new RTCSessionDescription(message));\n              } else if (message.type === 'answer') {\n                await this._setAnswer(new RTCSessionDescription(message));\n              } else if (message.type === 'candidate') {\n                if (message.ice) {\n                  this._traceLog('Received ICE candidate ...', message.ice);\n                  const candidate = new RTCIceCandidate(message.ice);\n                  this._addIceCandidate(candidate);\n                }\n              }\n            } catch (error) {\n              await this._disconnect();\n              this._callbacks.disconnect({ reason: 'SIGNALING-ERROR', error: error });\n            }\n          };\n        }\n      };\n    });\n  }\n\n  _createPeerConnection(): void {\n    this._traceLog('RTCConfiguration=>', this._pcConfig);\n    const pc = new RTCPeerConnection(this._pcConfig);\n    const audioTrack = this.stream && this.stream.getAudioTracks()[0];\n    if (audioTrack && this.options.audio.direction !== 'recvonly') {\n      pc.addTrack(audioTrack, this.stream!);\n    } else if (this.options.audio.enabled) {\n      pc.addTransceiver('audio', { direction: 'recvonly' });\n    }\n    const videoTrack = this.stream && this.stream.getVideoTracks()[0];\n    if (videoTrack && this.options.video.direction !== 'recvonly') {\n      const videoSender = pc.addTrack(videoTrack, this.stream!);\n      const videoTransceiver = this._getTransceiver(pc, videoSender);\n      if (this._isVideoCodecSpecified() && videoTransceiver !== null) {\n        if (typeof videoTransceiver.setCodecPreferences !== 'undefined') {\n          const videoCapabilities = RTCRtpSender.getCapabilities('video');\n          if (videoCapabilities) {\n            let videoCodecs = [];\n            if (this.options.video.codec) {\n              videoCodecs = getVideoCodecsFromString(this.options.video.codec, videoCapabilities.codecs);\n            }\n            this._traceLog('video codecs=', videoCodecs);\n            videoTransceiver.setCodecPreferences(videoCodecs);\n          }\n        } else {\n          this._removeCodec = true;\n        }\n      }\n    } else if (this.options.video.enabled) {\n      const videoTransceiver = pc.addTransceiver('video', { direction: 'recvonly' });\n      if (this._isVideoCodecSpecified()) {\n        if (typeof videoTransceiver.setCodecPreferences !== 'undefined') {\n          const videoCapabilities = RTCRtpSender.getCapabilities('video');\n          if (videoCapabilities) {\n            let videoCodecs = [];\n            if (this.options.video.codec) {\n              videoCodecs = getVideoCodecsFromString(this.options.video.codec, videoCapabilities.codecs);\n            }\n            this._traceLog('video codecs=', videoCodecs);\n            videoTransceiver.setCodecPreferences(videoCodecs);\n          }\n        } else {\n          this._removeCodec = true;\n        }\n      }\n    }\n    const tracks: Array<MediaStreamTrack> = [];\n    pc.ontrack = (event: RTCTrackEvent) => {\n      const callbackEvent: any = event;\n      this._traceLog('peer.ontrack()', event);\n      if (browser() === 'safari') {\n        tracks.push(event.track);\n        const mediaStream = new MediaStream(tracks);\n        this.remoteStream = mediaStream;\n      } else {\n        this.remoteStream = event.streams[0];\n      }\n      callbackEvent.stream = this.remoteStream;\n      this._callbacks.addstream(callbackEvent);\n    };\n    pc.onicecandidate = (event: RTCPeerConnectionIceEvent) => {\n      this._traceLog('peer.onicecandidate()', event);\n      if (event.candidate) {\n        this._sendIceCandidate(event.candidate);\n      } else {\n        this._traceLog('empty ice event', '');\n      }\n    };\n    pc.oniceconnectionstatechange = async () => {\n      this._traceLog('ICE connection Status has changed to ', pc.iceConnectionState);\n      if (this.connectionState !== pc.iceConnectionState) {\n        this.connectionState = pc.iceConnectionState;\n        switch (this.connectionState) {\n          case 'connected':\n            this._isOffer = false;\n            this._callbacks.connect();\n            break;\n          case 'disconnected':\n          case 'failed':\n            await this._disconnect();\n            this._callbacks.disconnect({ reason: 'ICE-CONNECTION-STATE-FAILED' });\n            break;\n        }\n      }\n    };\n    pc.onsignalingstatechange = (_) => {\n      this._traceLog('signaling state changes:', pc.signalingState);\n    };\n    pc.ondatachannel = this._onDataChannel.bind(this);\n    if (!this._pc) {\n      this._pc = pc;\n      this._callbacks.open({ authzMetadata: this.authzMetadata });\n    } else {\n      this._pc = pc;\n    }\n  }\n\n  async _createDataChannel(label: string, options: RTCDataChannelInit | undefined): Promise<RTCDataChannel | null> {\n    return new Promise<RTCDataChannel | null>((resolve, reject) => {\n      if (!this._pc) return reject('PeerConnection Does Not Ready');\n      if (this._isOffer) return reject('PeerConnection Has Local Offer');\n      let dataChannel = this._findDataChannel(label);\n      if (dataChannel) {\n        return reject('DataChannel Already Exists!');\n      }\n      if (this._isExistUser) {\n        dataChannel = this._pc.createDataChannel(label, options);\n        dataChannel.onclose = (event: Record<string, any>) => {\n          this._traceLog('datachannel onclosed=>', event);\n          this._dataChannels = this._dataChannels.filter((dataChannel) => dataChannel.label != label);\n        };\n        dataChannel.onerror = (event: Record<string, any>) => {\n          this._traceLog('datachannel onerror=>', event);\n          this._dataChannels = this._dataChannels.filter((dataChannel) => dataChannel.label != label);\n        };\n        dataChannel.onmessage = (event: any) => {\n          this._traceLog('datachannel onmessage=>', event.data);\n          event.label = label;\n        };\n        dataChannel.onopen = (event: Record<string, any>) => {\n          this._traceLog('datachannel onopen=>', event);\n        };\n        this._dataChannels.push(dataChannel);\n        return resolve(dataChannel);\n      }\n      return resolve(null);\n    });\n  }\n\n  _onDataChannel(event: RTCDataChannelEvent): void {\n    this._traceLog('on data channel', event);\n    if (!this._pc) return;\n    const dataChannel = event.channel;\n    const label = event.channel.label;\n    if (!event.channel) return;\n    if (!label || label.length < 1) return;\n    dataChannel.onopen = async (event: Record<string, any>) => {\n      this._traceLog('datachannel onopen=>', event);\n    };\n    dataChannel.onclose = async (event: Record<string, any>) => {\n      this._traceLog('datachannel onclosed=>', event);\n    };\n    dataChannel.onerror = async (event: Record<string, any>) => {\n      this._traceLog('datachannel onerror=>', event);\n    };\n    dataChannel.onmessage = (event: any) => {\n      this._traceLog('datachannel onmessage=>', event.data);\n      event.label = label;\n    };\n    if (!this._findDataChannel(label)) {\n      this._dataChannels.push(event.channel);\n    } else {\n      this._dataChannels = this._dataChannels.map((channel) => {\n        if (channel.label == label) {\n          return dataChannel;\n        } else {\n          return channel;\n        }\n      });\n    }\n    this._callbacks.datachannel(dataChannel);\n  }\n\n  async _sendOffer() {\n    if (!this._pc) {\n      return;\n    }\n    if (browser() === 'safari') {\n      if (this.options.video.enabled && this.options.video.direction === 'sendrecv') {\n        this._pc.addTransceiver('video', { direction: 'recvonly' });\n      }\n      if (this.options.audio.enabled && this.options.audio.direction === 'sendrecv') {\n        this._pc.addTransceiver('audio', { direction: 'recvonly' });\n      }\n    }\n    const offer: any = await this._pc.createOffer({\n      offerToReceiveAudio: this.options.audio.enabled && this.options.audio.direction !== 'sendonly',\n      offerToReceiveVideo: this.options.video.enabled && this.options.video.direction !== 'sendonly'\n    });\n    if (this._removeCodec && this.options.video.codec) {\n      const codecs: Array<VideoCodecOption> = ['VP8', 'VP9', 'H264'];\n      codecs.forEach((codec: VideoCodecOption) => {\n        if (this.options.video.codec !== codec) {\n          offer.sdp = removeCodec(offer.sdp, codec);\n        }\n      });\n    }\n    this._traceLog('create offer sdp, sdp=', offer.sdp);\n    await this._pc.setLocalDescription(offer);\n    if (this._pc.localDescription) {\n      this._sendSdp(this._pc.localDescription);\n    }\n    this._isOffer = true;\n  }\n\n  _isVideoCodecSpecified(): boolean {\n    return this.options.video.enabled && this.options.video.codec !== null;\n  }\n\n  async _createAnswer(): Promise<void> {\n    if (!this._pc) {\n      return;\n    }\n    try {\n      const answer = await this._pc.createAnswer();\n      this._traceLog('create answer sdp, sdp=', answer.sdp);\n      await this._pc.setLocalDescription(answer);\n      if (this._pc.localDescription) this._sendSdp(this._pc.localDescription);\n    } catch (error) {\n      await this._disconnect();\n      this._callbacks.disconnect({ reason: 'CREATE-ANSWER-ERROR', error: error });\n    }\n  }\n\n  async _setAnswer(sessionDescription: RTCSessionDescription): Promise<void> {\n    if (!this._pc) {\n      return;\n    }\n    await this._pc.setRemoteDescription(sessionDescription);\n    this._traceLog('set answer sdp=', sessionDescription.sdp);\n  }\n\n  async _setOffer(sessionDescription: RTCSessionDescription): Promise<void> {\n    try {\n      if (!this._pc) {\n        return;\n      }\n      await this._pc.setRemoteDescription(sessionDescription);\n      this._traceLog('set offer sdp=', sessionDescription.sdp);\n      await this._createAnswer();\n    } catch (error) {\n      await this._disconnect();\n      this._callbacks.disconnect({ reason: 'SET-OFFER-ERROR', error: error });\n    }\n  }\n\n  async _addIceCandidate(candidate: RTCIceCandidate): Promise<void> {\n    try {\n      if (this._pc) {\n        await this._pc.addIceCandidate(candidate);\n      }\n    } catch (_error) {\n      this._traceLog('invalid ice candidate', candidate);\n    }\n  }\n\n  _sendIceCandidate(candidate: RTCIceCandidate): void {\n    const message = { type: 'candidate', ice: candidate };\n    this._sendWs(message);\n  }\n\n  _sendSdp(sessionDescription: RTCSessionDescription): void {\n    this._sendWs(sessionDescription);\n  }\n\n  _sendWs(message: Record<string, any>) {\n    if (this._ws) {\n      this._ws.send(JSON.stringify(message));\n    }\n  }\n\n  _getTransceiver(pc: RTCPeerConnection, track: any): RTCRtpTransceiver | null {\n    let transceiver = null;\n    pc.getTransceivers().forEach((t: RTCRtpTransceiver) => {\n      if (t.sender == track || t.receiver == track) transceiver = t;\n    });\n    if (!transceiver) {\n      throw new Error('invalid transceiver');\n    }\n    return transceiver;\n  }\n\n  _findDataChannel(label: string): RTCDataChannel | undefined {\n    return this._dataChannels.find((channel) => channel.label == label);\n  }\n\n  async _closeDataChannel(dataChannel: RTCDataChannel): Promise<void> {\n    return new Promise((resolve) => {\n      if (dataChannel.readyState === 'closed') return resolve();\n      dataChannel.onclose = null;\n      const timerId = setInterval(() => {\n        if (dataChannel.readyState === 'closed') {\n          clearInterval(timerId);\n          return resolve();\n        }\n      }, 400);\n      dataChannel && dataChannel.close();\n    });\n  }\n\n  async _closePeerConnection(): Promise<void> {\n    return new Promise<void>((resolve) => {\n      if (browser() === 'safari' && this._pc) {\n        this._pc.oniceconnectionstatechange = () => {};\n        this._pc.close();\n        this._pc = null;\n        return resolve();\n      }\n      if (!this._pc) return resolve();\n      if (this._pc && this._pc.signalingState == 'closed') {\n        this._pc = null;\n        return resolve();\n      }\n      this._pc.oniceconnectionstatechange = () => {};\n      const timerId = setInterval(() => {\n        if (!this._pc) {\n          clearInterval(timerId);\n          return resolve();\n        }\n        if (this._pc && this._pc.signalingState == 'closed') {\n          this._pc = null;\n          clearInterval(timerId);\n          return resolve();\n        }\n      }, 400);\n      this._pc.close();\n    });\n  }\n\n  async _closeWebSocketConnection(): Promise<void> {\n    return new Promise<void>(resolve => {\n      if (!this._ws) return resolve();\n      if (this._ws && this._ws.readyState === 3) {\n        this._ws = null;\n        return resolve();\n      }\n      this._ws.onclose = () => {};\n      const timerId = setInterval(() => {\n        if (!this._ws) {\n          clearInterval(timerId);\n          return resolve();\n        }\n        if (this._ws.readyState === 3) {\n          this._ws = null;\n          clearInterval(timerId);\n          return resolve();\n        }\n      }, 400);\n      this._ws && this._ws.close();\n    });\n  }\n\n  _traceLog(title: string, message?: Record<string, any> | string) {\n    if (!this.debug) return;\n    traceLog(title, message);\n  }\n}\n\nexport default ConnectionBase;\n","import Connection from './connection';\nimport { ConnectionOptions } from './connection/options';\nimport { randomString } from './utils';\n\n/**\n * オーディオ、ビデオの送受信方向に関するオプションです。\n * - sendrecv\n * - recvonly\n * - sendonly\n *\n * @typedef {string} ConnectionDirection\n */\n\n/**\n * @typedef {Object} ConnectionAudioOption - オーディオ接続に関するオプションです。\n * @property {ConnectionDirection} direction 送受信方向\n * @property {boolean} enabled 有効かどうかのフラグ\n */\n\n/**\n * ビデオ接続のコーデックに関するオプションです。\n * - VP8\n * - VP9\n * - H264\n *\n * @typedef {string} VideoCodecOption\n */\n\n/**\n * @typedef {Object} ConnectionVideoOption - ビデオ接続に関するオプションです。\n * @property {VideoCodecOption} codec コーデックの設定\n * @property {ConnectionDirection} direction 送受信方向\n * @property {boolean} enabled 有効かどうかのフラグ\n */\n\n/**\n * @typedef {Object} ConnectionOptions - 接続時に指定するオプションです。\n * @property {ConnectionAudioOption} audio オーディオの設定\n * @property {ConnectionVideoOption} video ビデオの設定\n * @property {string} clientId クライアントID\n * @property {Array.<RTCIceServer>} iceServers ayame server から iceServers が返って来なかった場合に使われる iceServer の情報\n * @property {string} signalingKey 送信するシグナリングキー\n */\n\n/**\n * Ayame Connection のデフォルトのオプションです。\n *\n * audio: { direction: 'sendrecv', enabled: true}\n *\n * video: { direction: 'sendrecv', enabled: true}\n *\n * iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n *\n * clientId: randomString(17)\n *\n * @type {ConnectionOptions} ConnectionOptions\n */\nexport const defaultOptions: ConnectionOptions = {\n  audio: { direction: 'sendrecv', enabled: true },\n  video: { direction: 'sendrecv', enabled: true },\n  iceServers: [{ urls: 'stun:stun.l.google.com:19302' }],\n  clientId: randomString(17)\n};\n\n/**\n * @desc Ayame Connection を生成します。\n * @param {string} signalingUrl シグナリングに用いる websocket url\n * @param {string} roomId 接続する roomId\n * @param {ConnectionOptions} [options=defaultOptions] 接続時のオプション\n * @param {boolean} [debug=false] デバッグログを出力するかどうかのフラグ\n * @param {boolean} [isRelay=false] iceTranspolicy を強制的に relay するかどうかのフラグ(デバッグ用)\n * @return {Connection} 生成された Ayame Connection\n */\nexport function connection(\n  signalingUrl: string,\n  roomId: string,\n  options: ConnectionOptions = defaultOptions,\n  debug = false,\n  isRelay = false\n): Connection {\n  return new Connection(signalingUrl, roomId, options, debug, isRelay);\n}\n\n/**\n * @desc Ayame Web SDK のバージョンを出力します。\n * @return {string} Ayame Web SDK のバージョン\n */\nexport function version(): string {\n  return process.version;\n}\n"],"names":["browser","ua","window","navigator","userAgent","toLocaleLowerCase","indexOf","getVideoCodecsFromString","codec","codecs","mimeType","filteredCodecs","filter","c","length","Error","Connection","constructor","signalingUrl","roomId","options","debug","isRelay","this","_removeCodec","stream","remoteStream","_pc","_ws","authnMetadata","authzMetadata","_dataChannels","_isOffer","_isExistUser","connectionState","_pcConfig","iceServers","iceTransportPolicy","_callbacks","open","connect","disconnect","addstream","removestream","bye","datachannel","on","kind","callback","async","forEach","dataChannel","_closeDataChannel","_closePeerConnection","_closeWebSocketConnection","Promise","resolve","reject","WebSocket","onclose","_disconnect","reason","onerror","onopen","registerMessage","type","clientId","undefined","key","signalingKey","_sendWs","onmessage","event","data","message","JSON","parse","Array","isArray","_traceLog","isExistUser","_createPeerConnection","_sendOffer","signalingState","_setOffer","RTCSessionDescription","_setAnswer","ice","candidate","RTCIceCandidate","_addIceCandidate","error","pc","RTCPeerConnection","audioTrack","getAudioTracks","audio","direction","addTrack","enabled","addTransceiver","videoTrack","getVideoTracks","video","videoSender","videoTransceiver","_getTransceiver","_isVideoCodecSpecified","setCodecPreferences","videoCapabilities","RTCRtpSender","getCapabilities","videoCodecs","tracks","ontrack","callbackEvent","push","track","mediaStream","MediaStream","streams","onicecandidate","_sendIceCandidate","oniceconnectionstatechange","iceConnectionState","onsignalingstatechange","_","ondatachannel","_onDataChannel","bind","label","_findDataChannel","createDataChannel","channel","map","offer","createOffer","offerToReceiveAudio","offerToReceiveVideo","sdp","internalFunc","tmpSdp","codecre","RegExp","rtpmaps","match","rtpmap","modsdp","replace","rtcpre","fmtpre","aptpre","aptmaps","fmtpmap","rtppre","videore","videolines","videoelems","substring","split","modvideoline","videoelem","index","removeCodec","setLocalDescription","localDescription","_sendSdp","answer","createAnswer","sessionDescription","setRemoteDescription","_createAnswer","addIceCandidate","_error","send","stringify","transceiver","getTransceivers","t","sender","receiver","find","readyState","timerId","setInterval","clearInterval","close","title","value","prefix","performance","now","toFixed","console","log","info","traceLog","super","metadataOption","_signaling","_createDataChannel","defaultOptions","urls","strLength","result","charSet","charAt","Math","floor","random","join","randomString","process","version"],"mappings":"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"}