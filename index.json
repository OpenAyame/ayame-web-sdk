[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/ayame.ts",
    "content": "import Connection from './connection';\nimport { ConnectionOptions } from './connection/options';\nimport { randomString } from './utils';\n\n/**\n * オーディオ、ビデオの送受信方向に関するオプションです。\n * - sendrecv\n * - recvonly\n * - sendonly\n *\n * @typedef {string} ConnectionDirection\n */\n\n/**\n * @typedef {Object} ConnectionAudioOption - オーディオ接続に関するオプションです。\n * @property {ConnectionDirection} direction 送受信方向\n * @property {boolean} enabled 有効かどうかのフラグ\n */\n\n/**\n * ビデオ接続のコーデックに関するオプションです。\n * - VP8\n * - VP9\n * - H264\n *\n * @typedef {string} VideoCodecOption\n */\n\n/**\n * @typedef {Object} ConnectionVideoOption - ビデオ接続に関するオプションです。\n * @property {VideoCodecOption} codec コーデックの設定\n * @property {ConnectionDirection} direction 送受信方向\n * @property {boolean} enabled 有効かどうかのフラグ\n */\n\n/**\n * @typedef {Object} ConnectionOptions - 接続時に指定するオプションです。\n * @property {ConnectionAudioOption} audio オーディオの設定\n * @property {ConnectionVideoOption} video ビデオの設定\n * @property {string} clientId クライアントID\n * @property {Array.<RTCIceServer>} iceServers ayame server から iceServers が返って来なかった場合に使われる iceServer の情報\n * @property {string} signalingKey 送信するシグナリングキー\n */\n\n/**\n * Ayame Connection のデフォルトのオプションです。\n *\n * audio: { direction: 'sendrecv', enabled: true}\n *\n * video: { direction: 'sendrecv', enabled: true}\n *\n * iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n *\n * clientId: randomString(17)\n *\n * @type {ConnectionOptions} ConnectionOptions\n */\nexport const defaultOptions: ConnectionOptions = {\n  audio: { direction: 'sendrecv', enabled: true },\n  video: { direction: 'sendrecv', enabled: true },\n  iceServers: [{ urls: 'stun:stun.l.google.com:19302' }],\n  clientId: randomString(17)\n};\n\n/**\n * @desc Ayame Connection を生成します。\n * @param {string} signalingUrl シグナリングに用いる websocket url\n * @param {string} roomId 接続する roomId\n * @param {ConnectionOptions} [options=defaultOptions] 接続時のオプション\n * @param {boolean} [debug=false] デバッグログを出力するかどうかのフラグ\n * @param {boolean} [isRelay=false] iceTranspolicy を強制的に relay するかどうかのフラグ(デバッグ用)\n * @return {Connection} 生成された Ayame Connection\n */\nexport function connection(\n  signalingUrl: string,\n  roomId: string,\n  options: ConnectionOptions = defaultOptions,\n  debug = false,\n  isRelay = false\n): Connection {\n  return new Connection(signalingUrl, roomId, options, debug, isRelay);\n}\n\n/**\n * @desc Ayame Web SDK のバージョンを出力します。\n * @return {string} Ayame Web SDK のバージョン\n */\nexport function version(): string {\n  return process.version;\n}\n",
    "static": true,
    "longname": "/Users/nakai/shiguredo/ayame-web-sdk/src/ayame.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "typedef",
    "name": "ConnectionDirection",
    "memberof": "src/ayame.ts",
    "static": true,
    "longname": "src/ayame.ts~ConnectionDirection",
    "access": "public",
    "description": "オーディオ、ビデオの送受信方向に関するオプションです。\n- sendrecv\n- recvonly\n- sendonly",
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "ConnectionDirection"
    }
  },
  {
    "__docId__": 50,
    "kind": "typedef",
    "name": "ConnectionAudioOption",
    "memberof": "src/ayame.ts",
    "static": true,
    "longname": "src/ayame.ts~ConnectionAudioOption",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "ConnectionDirection"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "送受信方向"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "有効かどうかのフラグ"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ConnectionAudioOption"
    }
  },
  {
    "__docId__": 51,
    "kind": "typedef",
    "name": "VideoCodecOption",
    "memberof": "src/ayame.ts",
    "static": true,
    "longname": "src/ayame.ts~VideoCodecOption",
    "access": "public",
    "description": "ビデオ接続のコーデックに関するオプションです。\n- VP8\n- VP9\n- H264",
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "VideoCodecOption"
    }
  },
  {
    "__docId__": 52,
    "kind": "typedef",
    "name": "ConnectionVideoOption",
    "memberof": "src/ayame.ts",
    "static": true,
    "longname": "src/ayame.ts~ConnectionVideoOption",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "VideoCodecOption"
        ],
        "spread": false,
        "optional": false,
        "name": "codec",
        "description": "コーデックの設定"
      },
      {
        "nullable": null,
        "types": [
          "ConnectionDirection"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "送受信方向"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "有効かどうかのフラグ"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ConnectionVideoOption"
    }
  },
  {
    "__docId__": 53,
    "kind": "typedef",
    "name": "ConnectionOptions",
    "memberof": "src/ayame.ts",
    "static": true,
    "longname": "src/ayame.ts~ConnectionOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "ConnectionAudioOption"
        ],
        "spread": false,
        "optional": false,
        "name": "audio",
        "description": "オーディオの設定"
      },
      {
        "nullable": null,
        "types": [
          "ConnectionVideoOption"
        ],
        "spread": false,
        "optional": false,
        "name": "video",
        "description": "ビデオの設定"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "clientId",
        "description": "クライアントID"
      },
      {
        "nullable": null,
        "types": [
          "Array.<RTCIceServer>"
        ],
        "spread": false,
        "optional": false,
        "name": "iceServers",
        "description": "ayame server から iceServers が返って来なかった場合に使われる iceServer の情報"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "signalingKey",
        "description": "送信するシグナリングキー"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ConnectionOptions"
    }
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "defaultOptions",
    "memberof": "src/ayame.ts",
    "static": true,
    "longname": "src/ayame.ts~defaultOptions",
    "access": "public",
    "export": true,
    "importPath": "@open-ayame/ayame-web-sdk/src/ayame.ts",
    "importStyle": "{defaultOptions}",
    "description": "Ayame Connection のデフォルトのオプションです。\n\naudio: { direction: 'sendrecv', enabled: true}\n\nvideo: { direction: 'sendrecv', enabled: true}\n\niceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n\nclientId: randomString(17)",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "ConnectionOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "connection",
    "memberof": "src/ayame.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ayame.ts~connection",
    "access": "public",
    "export": true,
    "importPath": "@open-ayame/ayame-web-sdk/src/ayame.ts",
    "importStyle": "{connection}",
    "description": "Ayame Connection を生成します。",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "signalingUrl",
        "description": "シグナリングに用いる websocket url"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "roomId",
        "description": "接続する roomId"
      },
      {
        "nullable": null,
        "types": [
          "ConnectionOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "defaultOptions",
        "defaultRaw": "defaultOptions",
        "name": "options",
        "description": "接続時のオプション"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "debug",
        "description": "デバッグログを出力するかどうかのフラグ"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "isRelay",
        "description": "iceTranspolicy を強制的に relay するかどうかのフラグ(デバッグ用)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Connection"
      ],
      "spread": false,
      "description": "生成された Ayame Connection"
    }
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "version",
    "memberof": "src/ayame.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ayame.ts~version",
    "access": "public",
    "export": true,
    "importPath": "@open-ayame/ayame-web-sdk/src/ayame.ts",
    "importStyle": "{version}",
    "description": "Ayame Web SDK のバージョンを出力します。",
    "lineNumber": 99,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Ayame Web SDK のバージョン"
    },
    "params": []
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "src/connection/base.ts",
    "content": "/* @private */\nimport { traceLog, getVideoCodecsFromString, removeCodec, browser } from '../utils';\nimport { ConnectionOptions, VideoCodecOption } from './options';\n\n/**\n * @ignore\n */\ninterface AyameRegisterMessage {\n  type: string;\n  roomId: string;\n  clientId: string;\n  key?: string;\n  authnMetadata?: any;\n}\n\n/**\n * @ignore\n */\nclass ConnectionBase {\n  debug: boolean;\n  roomId: string;\n  signalingUrl: string;\n  options: ConnectionOptions;\n  connectionState: string;\n  stream: MediaStream | null;\n  remoteStream: MediaStream | null;\n  authnMetadata: any;\n  authzMetadata: any;\n  _ws: WebSocket | null;\n  _pc: RTCPeerConnection | null;\n  _callbacks: any;\n  _removeCodec: boolean;\n  _isOffer: boolean;\n  _isExistUser: boolean;\n  _dataChannels: Array<RTCDataChannel>;\n  _pcConfig: {\n    iceServers: Array<RTCIceServer>;\n    iceTransportPolicy: RTCIceTransportPolicy;\n  };\n\n  /**\n   * @ignore\n   */\n  on(kind: string, callback: Function): void {\n    if (kind in this._callbacks) {\n      this._callbacks[kind] = callback;\n    }\n  }\n\n  /**\n   * オブジェクトを生成し、リモートのピアまたはサーバーに接続します。\n   * @param signalingUrl シグナリングに利用する URL\n   * @param roomId Ayame のルームID\n   * @param options Ayame の接続オプション\n   * @param [debug=false] デバッグログの出力可否\n   * @param [isRelay=false] iceTransportPolicy を強制的に relay にするか\n   * @listens {open} Ayame Server に accept され、PeerConnection が生成されると送信されます。\n   * @listens {connect} PeerConnection が接続されると送信されます。\n   * @listens {disconnect} PeerConnection が切断されると送信されます。\n   * @listens {addstream} リモートのストリームが追加されると送信されます。\n   * @listens {removestream} リモートのストリームが削除されると送信されます。\n   * @listens {bye} Ayame Server から bye を受信すると送信されます。\n   */\n  constructor(signalingUrl: string, roomId: string, options: ConnectionOptions, debug = false, isRelay = false) {\n    this.debug = debug;\n    this.roomId = roomId;\n    this.signalingUrl = signalingUrl;\n    this.options = options;\n    this._removeCodec = false;\n    this.stream = null;\n    this.remoteStream = null;\n    this._pc = null;\n    this._ws = null;\n    this.authnMetadata = null;\n    this.authzMetadata = null;\n    this._dataChannels = [];\n    this._isOffer = false;\n    this._isExistUser = false;\n    this.connectionState = 'new';\n    this._pcConfig = {\n      iceServers: this.options.iceServers,\n      iceTransportPolicy: isRelay ? 'relay' : 'all'\n    };\n    this._callbacks = {\n      open: () => {},\n      connect: () => {},\n      disconnect: () => {},\n      addstream: () => {},\n      removestream: () => {},\n      bye: () => {},\n      datachannel: () => {}\n    };\n  }\n\n  async _disconnect(): Promise<void> {\n    await this._dataChannels.forEach(async (dataChannel: RTCDataChannel) => {\n      await this._closeDataChannel(dataChannel);\n    });\n    await this._closePeerConnection();\n    await this._closeWebSocketConnection();\n    this.authzMetadata = null;\n    this._removeCodec = false;\n    this._isOffer = false;\n    this._isExistUser = false;\n    this._dataChannels = [];\n    this.connectionState = 'new';\n  }\n\n  async _signaling(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      if (this._ws) {\n        return reject('WS-ALREADY-EXISTS');\n      }\n      this._ws = new WebSocket(this.signalingUrl);\n      this._ws.onclose = async () => {\n        await this._disconnect();\n        this._callbacks.disconnect({ reason: 'WS-CLOSED' });\n        return reject('WS-CLOSED');\n      };\n      this._ws.onerror = async () => {\n        await this._disconnect();\n        return reject('WS-CLOSED-WITH-ERROR');\n      };\n      this._ws.onopen = () => {\n        const registerMessage: AyameRegisterMessage = {\n          type: 'register',\n          roomId: this.roomId,\n          clientId: this.options.clientId,\n          authnMetadata: undefined,\n          key: undefined\n        };\n        if (this.authnMetadata !== null) {\n          registerMessage.authnMetadata = this.authnMetadata;\n        }\n        if (this.options.signalingKey !== null) {\n          registerMessage.key = this.options.signalingKey;\n        }\n        this._sendWs(registerMessage);\n        if (this._ws) {\n          this._ws.onmessage = async (event: MessageEvent) => {\n            try {\n              if (typeof event.data !== 'string') {\n                return;\n              }\n              const message = JSON.parse(event.data);\n              if (message.type === 'ping') {\n                this._sendWs({ type: 'pong' });\n              } else if (message.type === 'bye') {\n                this._callbacks.bye(event);\n                return resolve();\n              } else if (message.type === 'accept') {\n                this.authzMetadata = message.authzMetadata;\n                if (Array.isArray(message.iceServers) && message.iceServers.length > 0) {\n                  this._traceLog('iceServers=>', message.iceServers);\n                  this._pcConfig.iceServers = message.iceServers;\n                }\n                this._traceLog('isExistUser=>', message.isExistUser);\n                this._isExistUser = message.isExistUser;\n                this._createPeerConnection();\n                if (this._isExistUser === true) {\n                  await this._sendOffer();\n                }\n                return resolve();\n              } else if (message.type === 'reject') {\n                await this._disconnect();\n                this._callbacks.disconnect({ reason: message.reason || 'REJECTED' });\n                return reject('REJECTED');\n              } else if (message.type === 'offer') {\n                if (this._pc && this._pc.signalingState === 'have-local-offer') {\n                  this._createPeerConnection();\n                }\n                this._setOffer(new RTCSessionDescription(message));\n              } else if (message.type === 'answer') {\n                await this._setAnswer(new RTCSessionDescription(message));\n              } else if (message.type === 'candidate') {\n                if (message.ice) {\n                  this._traceLog('Received ICE candidate ...', message.ice);\n                  const candidate = new RTCIceCandidate(message.ice);\n                  this._addIceCandidate(candidate);\n                }\n              }\n            } catch (error) {\n              await this._disconnect();\n              this._callbacks.disconnect({ reason: 'SIGNALING-ERROR', error: error });\n            }\n          };\n        }\n      };\n    });\n  }\n\n  _createPeerConnection(): void {\n    this._traceLog('RTCConfiguration=>', this._pcConfig);\n    const pc = new RTCPeerConnection(this._pcConfig);\n    const audioTrack = this.stream && this.stream.getAudioTracks()[0];\n    if (audioTrack && this.options.audio.direction !== 'recvonly') {\n      pc.addTrack(audioTrack, this.stream!);\n    } else if (this.options.audio.enabled) {\n      pc.addTransceiver('audio', { direction: 'recvonly' });\n    }\n    const videoTrack = this.stream && this.stream.getVideoTracks()[0];\n    if (videoTrack && this.options.video.direction !== 'recvonly') {\n      const videoSender = pc.addTrack(videoTrack, this.stream!);\n      const videoTransceiver = this._getTransceiver(pc, videoSender);\n      if (this._isVideoCodecSpecified() && videoTransceiver !== null) {\n        if (typeof videoTransceiver.setCodecPreferences !== 'undefined') {\n          const videoCapabilities = RTCRtpSender.getCapabilities('video');\n          if (videoCapabilities) {\n            let videoCodecs = [];\n            if (this.options.video.codec) {\n              videoCodecs = getVideoCodecsFromString(this.options.video.codec, videoCapabilities.codecs);\n            }\n            this._traceLog('video codecs=', videoCodecs);\n            videoTransceiver.setCodecPreferences(videoCodecs);\n          }\n        } else {\n          this._removeCodec = true;\n        }\n      }\n    } else if (this.options.video.enabled) {\n      const videoTransceiver = pc.addTransceiver('video', { direction: 'recvonly' });\n      if (this._isVideoCodecSpecified()) {\n        if (typeof videoTransceiver.setCodecPreferences !== 'undefined') {\n          const videoCapabilities = RTCRtpSender.getCapabilities('video');\n          if (videoCapabilities) {\n            let videoCodecs = [];\n            if (this.options.video.codec) {\n              videoCodecs = getVideoCodecsFromString(this.options.video.codec, videoCapabilities.codecs);\n            }\n            this._traceLog('video codecs=', videoCodecs);\n            videoTransceiver.setCodecPreferences(videoCodecs);\n          }\n        } else {\n          this._removeCodec = true;\n        }\n      }\n    }\n    const tracks: Array<MediaStreamTrack> = [];\n    pc.ontrack = (event: RTCTrackEvent) => {\n      const callbackEvent: any = event;\n      this._traceLog('peer.ontrack()', event);\n      if (browser() === 'safari') {\n        tracks.push(event.track);\n        const mediaStream = new MediaStream(tracks);\n        this.remoteStream = mediaStream;\n      } else {\n        this.remoteStream = event.streams[0];\n      }\n      callbackEvent.stream = this.remoteStream;\n      this._callbacks.addstream(callbackEvent);\n    };\n    pc.onicecandidate = (event: RTCPeerConnectionIceEvent) => {\n      this._traceLog('peer.onicecandidate()', event);\n      if (event.candidate) {\n        this._sendIceCandidate(event.candidate);\n      } else {\n        this._traceLog('empty ice event', '');\n      }\n    };\n    pc.oniceconnectionstatechange = async () => {\n      this._traceLog('ICE connection Status has changed to ', pc.iceConnectionState);\n      if (this.connectionState !== pc.iceConnectionState) {\n        this.connectionState = pc.iceConnectionState;\n        switch (this.connectionState) {\n          case 'connected':\n            this._isOffer = false;\n            this._callbacks.connect();\n            break;\n          case 'disconnected':\n          case 'failed':\n            await this._disconnect();\n            this._callbacks.disconnect({ reason: 'ICE-CONNECTION-STATE-FAILED' });\n            break;\n        }\n      }\n    };\n    pc.onsignalingstatechange = _ => {\n      this._traceLog('signaling state changes:', pc.signalingState);\n    };\n    pc.ondatachannel = this._onDataChannel.bind(this);\n    if (!this._pc) {\n      this._pc = pc;\n      this._callbacks.open({ authzMetadata: this.authzMetadata });\n    } else {\n      this._pc = pc;\n    }\n  }\n\n  async _createDataChannel(label: string, options: RTCDataChannelInit | undefined): Promise<RTCDataChannel | null> {\n    return new Promise<RTCDataChannel | null>((resolve, reject) => {\n      if (!this._pc) return reject('PeerConnection Does Not Ready');\n      if (this._isOffer) return reject('PeerConnection Has Local Offer');\n      let dataChannel = this._findDataChannel(label);\n      if (dataChannel) {\n        return reject('DataChannel Already Exists!');\n      }\n      if (this._isExistUser) {\n        dataChannel = this._pc.createDataChannel(label, options);\n        dataChannel.onclose = (event: Record<string, any>) => {\n          this._traceLog('datachannel onclosed=>', event);\n          this._dataChannels = this._dataChannels.filter(dataChannel => dataChannel.label != label);\n        };\n        dataChannel.onerror = (event: Record<string, any>) => {\n          this._traceLog('datachannel onerror=>', event);\n          this._dataChannels = this._dataChannels.filter(dataChannel => dataChannel.label != label);\n        };\n        dataChannel.onmessage = (event: any) => {\n          this._traceLog('datachannel onmessage=>', event.data);\n          event.label = label;\n        };\n        dataChannel.onopen = (event: Record<string, any>) => {\n          this._traceLog('datachannel onopen=>', event);\n        };\n        this._dataChannels.push(dataChannel);\n        return resolve(dataChannel);\n      }\n      return resolve(null);\n    });\n  }\n\n  _onDataChannel(event: RTCDataChannelEvent): void {\n    this._traceLog('on data channel', event);\n    if (!this._pc) return;\n    const dataChannel = event.channel;\n    const label = event.channel.label;\n    if (!event.channel) return;\n    if (!label || label.length < 1) return;\n    dataChannel.onopen = async (event: Record<string, any>) => {\n      this._traceLog('datachannel onopen=>', event);\n    };\n    dataChannel.onclose = async (event: Record<string, any>) => {\n      this._traceLog('datachannel onclosed=>', event);\n    };\n    dataChannel.onerror = async (event: Record<string, any>) => {\n      this._traceLog('datachannel onerror=>', event);\n    };\n    dataChannel.onmessage = (event: any) => {\n      this._traceLog('datachannel onmessage=>', event.data);\n      event.label = label;\n    };\n    if (!this._findDataChannel(label)) {\n      this._dataChannels.push(event.channel);\n    } else {\n      this._dataChannels = this._dataChannels.map(channel => {\n        if (channel.label == label) {\n          return dataChannel;\n        } else {\n          return channel;\n        }\n      });\n    }\n    this._callbacks.datachannel(dataChannel);\n  }\n\n  async _sendOffer() {\n    if (!this._pc) {\n      return;\n    }\n    if (browser() === 'safari') {\n      if (this.options.video.enabled && this.options.video.direction === 'sendrecv') {\n        this._pc.addTransceiver('video', { direction: 'recvonly' });\n      }\n      if (this.options.audio.enabled && this.options.audio.direction === 'sendrecv') {\n        this._pc.addTransceiver('audio', { direction: 'recvonly' });\n      }\n    }\n    const offer: any = await this._pc.createOffer({\n      offerToReceiveAudio: this.options.audio.enabled && this.options.audio.direction !== 'sendonly',\n      offerToReceiveVideo: this.options.video.enabled && this.options.video.direction !== 'sendonly'\n    });\n    if (this._removeCodec && this.options.video.codec) {\n      const codecs: Array<VideoCodecOption> = ['VP8', 'VP9', 'H264'];\n      codecs.forEach((codec: VideoCodecOption) => {\n        if (this.options.video.codec !== codec) {\n          offer.sdp = removeCodec(offer.sdp, codec);\n        }\n      });\n    }\n    this._traceLog('create offer sdp, sdp=', offer.sdp);\n    await this._pc.setLocalDescription(offer);\n    if (this._pc.localDescription) {\n      this._sendSdp(this._pc.localDescription);\n    }\n    this._isOffer = true;\n  }\n\n  _isVideoCodecSpecified(): boolean {\n    return this.options.video.enabled && this.options.video.codec !== null;\n  }\n\n  async _createAnswer(): Promise<void> {\n    if (!this._pc) {\n      return;\n    }\n    try {\n      const answer = await this._pc.createAnswer();\n      this._traceLog('create answer sdp, sdp=', answer.sdp);\n      await this._pc.setLocalDescription(answer);\n      if (this._pc.localDescription) this._sendSdp(this._pc.localDescription);\n    } catch (error) {\n      await this._disconnect();\n      this._callbacks.disconnect({ reason: 'CREATE-ANSWER-ERROR', error: error });\n    }\n  }\n\n  async _setAnswer(sessionDescription: RTCSessionDescription): Promise<void> {\n    if (!this._pc) {\n      return;\n    }\n    await this._pc.setRemoteDescription(sessionDescription);\n    this._traceLog('set answer sdp=', sessionDescription.sdp);\n  }\n\n  async _setOffer(sessionDescription: RTCSessionDescription): Promise<void> {\n    try {\n      if (!this._pc) {\n        return;\n      }\n      await this._pc.setRemoteDescription(sessionDescription);\n      this._traceLog('set offer sdp=', sessionDescription.sdp);\n      await this._createAnswer();\n    } catch (error) {\n      await this._disconnect();\n      this._callbacks.disconnect({ reason: 'SET-OFFER-ERROR', error: error });\n    }\n  }\n\n  async _addIceCandidate(candidate: RTCIceCandidate): Promise<void> {\n    try {\n      if (this._pc) {\n        await this._pc.addIceCandidate(candidate);\n      }\n    } catch (_error) {\n      this._traceLog('invalid ice candidate', candidate);\n    }\n  }\n\n  _sendIceCandidate(candidate: RTCIceCandidate): void {\n    const message = { type: 'candidate', ice: candidate };\n    this._sendWs(message);\n  }\n\n  _sendSdp(sessionDescription: RTCSessionDescription): void {\n    this._sendWs(sessionDescription);\n  }\n\n  _sendWs(message: Record<string, any>) {\n    if (this._ws) {\n      this._ws.send(JSON.stringify(message));\n    }\n  }\n\n  _getTransceiver(pc: RTCPeerConnection, track: any): RTCRtpTransceiver | null {\n    let transceiver = null;\n    pc.getTransceivers().forEach((t: RTCRtpTransceiver) => {\n      if (t.sender == track || t.receiver == track) transceiver = t;\n    });\n    if (!transceiver) {\n      throw new Error('invalid transceiver');\n    }\n    return transceiver;\n  }\n\n  _findDataChannel(label: string): RTCDataChannel | undefined {\n    return this._dataChannels.find(channel => channel.label == label);\n  }\n\n  async _closeDataChannel(dataChannel: RTCDataChannel): Promise<void> {\n    return new Promise(resolve => {\n      if (dataChannel.readyState === 'closed') return resolve();\n      dataChannel.onclose = null;\n      const timerId = setInterval(() => {\n        if (dataChannel.readyState === 'closed') {\n          clearInterval(timerId);\n          return resolve();\n        }\n      }, 400);\n      dataChannel && dataChannel.close();\n    });\n  }\n\n  async _closePeerConnection(): Promise<void> {\n    return new Promise<void>(resolve => {\n      if (browser() === 'safari' && this._pc) {\n        this._pc.oniceconnectionstatechange = () => {};\n        this._pc.close();\n        this._pc = null;\n        return resolve();\n      }\n      if (!this._pc) return resolve();\n      if (this._pc && this._pc.signalingState == 'closed') {\n        this._pc = null;\n        return resolve();\n      }\n      this._pc.oniceconnectionstatechange = () => {};\n      const timerId = setInterval(() => {\n        if (!this._pc) {\n          clearInterval(timerId);\n          return resolve();\n        }\n        if (this._pc && this._pc.signalingState == 'closed') {\n          this._pc = null;\n          clearInterval(timerId);\n          return resolve();\n        }\n      }, 400);\n      this._pc.close();\n    });\n  }\n\n  async _closeWebSocketConnection(): Promise<void> {\n    return new Promise<void>(resolve => {\n      if (!this._ws) return resolve();\n      if (this._ws && this._ws.readyState === 3) {\n        this._ws = null;\n        return resolve();\n      }\n      this._ws.onclose = () => {};\n      const timerId = setInterval(() => {\n        if (!this._ws) {\n          clearInterval(timerId);\n          return resolve();\n        }\n        if (this._ws.readyState === 3) {\n          this._ws = null;\n          clearInterval(timerId);\n          return resolve();\n        }\n      }, 400);\n      this._ws && this._ws.close();\n    });\n  }\n\n  _traceLog(title: string, message?: Record<string, any> | string) {\n    if (!this.debug) return;\n    traceLog(title, message);\n  }\n}\n\nexport default ConnectionBase;\n",
    "static": true,
    "longname": "/Users/nakai/shiguredo/ayame-web-sdk/src/connection/base.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "class",
    "name": "ConnectionBase",
    "memberof": "src/connection/base.ts",
    "static": true,
    "longname": "src/connection/base.ts~ConnectionBase",
    "access": "public",
    "export": true,
    "importPath": "@open-ayame/ayame-web-sdk/src/connection/base.ts",
    "importStyle": "ConnectionBase",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "on",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#on",
    "access": "public",
    "description": "",
    "lineNumber": 26,
    "ignore": true,
    "params": [
      {
        "name": "kind",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 60,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#constructor",
    "access": "public",
    "description": "オブジェクトを生成し、リモートのピアまたはサーバーに接続します。",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "signalingUrl",
        "description": "シグナリングに利用する URL"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "roomId",
        "description": "Ayame のルームID"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Ayame の接続オプション"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "debug",
        "description": "デバッグログの出力可否"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "isRelay",
        "description": "iceTransportPolicy を強制的に relay にするか"
      }
    ],
    "listens": [
      {
        "types": [
          "open"
        ],
        "description": "Ayame Server に accept され、PeerConnection が生成されると送信されます。"
      },
      {
        "types": [
          "connect"
        ],
        "description": "PeerConnection が接続されると送信されます。"
      },
      {
        "types": [
          "disconnect"
        ],
        "description": "PeerConnection が切断されると送信されます。"
      },
      {
        "types": [
          "addstream"
        ],
        "description": "リモートのストリームが追加されると送信されます。"
      },
      {
        "types": [
          "removestream"
        ],
        "description": "リモートのストリームが削除されると送信されます。"
      },
      {
        "types": [
          "bye"
        ],
        "description": "Ayame Server から bye を受信すると送信されます。"
      }
    ]
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "debug",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#debug",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "roomId",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#roomId",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "signalingUrl",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#signalingUrl",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "options",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#options",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "_removeCodec",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_removeCodec",
    "access": "private",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "stream",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#stream",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "remoteStream",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#remoteStream",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "_pc",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_pc",
    "access": "private",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "_ws",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_ws",
    "access": "private",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "authnMetadata",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#authnMetadata",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "authzMetadata",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#authzMetadata",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "_dataChannels",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_dataChannels",
    "access": "private",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "_isOffer",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_isOffer",
    "access": "private",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "_isExistUser",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_isExistUser",
    "access": "private",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "connectionState",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#connectionState",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "_pcConfig",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_pcConfig",
    "access": "private",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{\"iceServers\": *, \"iceTransportPolicy\": *}"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "_callbacks",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_callbacks",
    "access": "private",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{\"open\": *, \"connect\": *, \"disconnect\": *, \"addstream\": *, \"removestream\": *, \"bye\": *, \"datachannel\": *}"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "_disconnect",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_disconnect",
    "access": "private",
    "description": "",
    "lineNumber": 95,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "_signaling",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_signaling",
    "access": "private",
    "description": "",
    "lineNumber": 109,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "_createPeerConnection",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_createPeerConnection",
    "access": "private",
    "description": "",
    "lineNumber": 192,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "_createDataChannel",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_createDataChannel",
    "access": "private",
    "description": "",
    "lineNumber": 289,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "_onDataChannel",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_onDataChannel",
    "access": "private",
    "description": "",
    "lineNumber": 321,
    "params": [
      {
        "nullable": null,
        "types": [
          "RTCDataChannelEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "_sendOffer",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_sendOffer",
    "access": "private",
    "description": "",
    "lineNumber": 355,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "_isVideoCodecSpecified",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_isVideoCodecSpecified",
    "access": "private",
    "description": "",
    "lineNumber": 387,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "_createAnswer",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_createAnswer",
    "access": "private",
    "description": "",
    "lineNumber": 391,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "_setAnswer",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_setAnswer",
    "access": "private",
    "description": "",
    "lineNumber": 406,
    "params": [
      {
        "nullable": null,
        "types": [
          "RTCSessionDescription"
        ],
        "spread": false,
        "optional": false,
        "name": "sessionDescription",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "_setOffer",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_setOffer",
    "access": "private",
    "description": "",
    "lineNumber": 414,
    "params": [
      {
        "nullable": null,
        "types": [
          "RTCSessionDescription"
        ],
        "spread": false,
        "optional": false,
        "name": "sessionDescription",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "_addIceCandidate",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_addIceCandidate",
    "access": "private",
    "description": "",
    "lineNumber": 428,
    "params": [
      {
        "nullable": null,
        "types": [
          "RTCIceCandidate"
        ],
        "spread": false,
        "optional": false,
        "name": "candidate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "_sendIceCandidate",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_sendIceCandidate",
    "access": "private",
    "description": "",
    "lineNumber": 438,
    "params": [
      {
        "nullable": null,
        "types": [
          "RTCIceCandidate"
        ],
        "spread": false,
        "optional": false,
        "name": "candidate",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "_sendSdp",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_sendSdp",
    "access": "private",
    "description": "",
    "lineNumber": 443,
    "params": [
      {
        "nullable": null,
        "types": [
          "RTCSessionDescription"
        ],
        "spread": false,
        "optional": false,
        "name": "sessionDescription",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "_sendWs",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_sendWs",
    "access": "private",
    "description": "",
    "lineNumber": 447,
    "params": [
      {
        "nullable": null,
        "types": [
          "Record"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "_getTransceiver",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_getTransceiver",
    "access": "private",
    "description": "",
    "lineNumber": 453,
    "params": [
      {
        "nullable": null,
        "types": [
          "RTCPeerConnection"
        ],
        "spread": false,
        "optional": false,
        "name": "pc",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "track",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "_findDataChannel",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_findDataChannel",
    "access": "private",
    "description": "",
    "lineNumber": 464,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "_closeDataChannel",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_closeDataChannel",
    "access": "private",
    "description": "",
    "lineNumber": 468,
    "params": [
      {
        "nullable": null,
        "types": [
          "RTCDataChannel"
        ],
        "spread": false,
        "optional": false,
        "name": "dataChannel",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "_closePeerConnection",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_closePeerConnection",
    "access": "private",
    "description": "",
    "lineNumber": 482,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "_closeWebSocketConnection",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_closeWebSocketConnection",
    "access": "private",
    "description": "",
    "lineNumber": 511,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "_traceLog",
    "memberof": "src/connection/base.ts~ConnectionBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection/base.ts~ConnectionBase#_traceLog",
    "access": "private",
    "description": "",
    "lineNumber": 534,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 125,
    "kind": "file",
    "name": "src/connection/index.ts",
    "content": "import ConnectionBase from './base';\nimport { ConnectionOptions, MetadataOption } from './options';\n\n/**\n * Peer Connection 接続を管理するクラスです。\n */\nclass Connection extends ConnectionBase {\n  /**\n   * @desc オブジェクトを生成し、リモートのピアまたはサーバーに接続します。\n   * @param {string} signalingUrl シグナリングに利用する URL\n   * @param {string} roomId Ayame のルームID\n   * @param {ConnectionOptions} options Ayame の接続オプション\n   * @param {boolean} [debug=false] デバッグログの出力可否\n   * @param {boolean} [isRelay=false] iceTransportPolicy を強制的に relay にするか\n   * @listens {open} Ayame Server に accept され、PeerConnection が生成されると送信されます。\n   * @listens {connect} PeerConnection が接続されると送信されます。\n   * @listens {disconnect} PeerConnection が切断されると送信されます。\n   * @listens {addstream} リモートのストリームが追加されると送信されます。\n   * @listens {removestream} リモートのストリームが削除されると送信されます。\n   */\n  constructor(signalingUrl: string, roomId: string, options: ConnectionOptions, debug = false, isRelay = false) {\n    super(signalingUrl, roomId, options, debug, isRelay);\n  }\n\n  /**\n   * @typedef {Object} MetadataOption - 接続時に指定できるメタデータです。\n   * @property {any} authnMetadata 送信するメタデータ\n   */\n\n  /**\n   * @desc PeerConnection  接続を開始します。\n   * @param {MediaStream|null} [stream=null] - ローカルのストリーム\n   * @param {MetadataOption|null} [metadataOption=null] - 送信するメタデータ\n   */\n  public async connect(stream: MediaStream | null, metadataOption: MetadataOption | null = null): Promise<void> {\n    if (this._ws || this._pc) {\n      this._traceLog('connection already exists');\n      throw new Error('Connection Already Exists!');\n    }\n    /** @type {MediaStream|null} */\n    this.stream = stream;\n    if (metadataOption) {\n      /** @type {any} */\n      this.authnMetadata = metadataOption.authnMetadata;\n    }\n    await this._signaling();\n  }\n\n  /**\n   * @desc Datachannel を作成します。\n   * @param {string} label - dataChannel の label\n   * @param {RTCDataChannelInit|undefined} [options=undefined] - dataChannel の init オプション\n   * @return {RTCDataChannel|null} 生成されたデータチャネル\n   */\n  public async createDataChannel(\n    label: string,\n    options: RTCDataChannelInit | undefined = undefined\n  ): Promise<RTCDataChannel | null> {\n    return await this._createDataChannel(label, options);\n  }\n\n  /**\n   * @desc Datachannel を削除します。\n   * @param {string} label - 削除する dataChannel の label\n   */\n  public async removeDataChannel(label: string): Promise<void> {\n    this._traceLog('datachannel remove=>', label);\n    const dataChannel = this._findDataChannel(label);\n    if (dataChannel && dataChannel.readyState === 'open') {\n      await this._closeDataChannel(dataChannel);\n    } else {\n      throw new Error('data channel is not exist or open');\n    }\n  }\n\n  /**\n   * @desc PeerConnection  接続を切断します。\n   */\n  public async disconnect(): Promise<void> {\n    return new Promise(resolve => {\n      if (this._ws) {\n        this._ws.close();\n      }\n      return resolve();\n    });\n  }\n}\n\nexport default Connection;\n",
    "static": true,
    "longname": "/Users/nakai/shiguredo/ayame-web-sdk/src/connection/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "class",
    "name": "Connection",
    "memberof": "src/connection/index.ts",
    "static": true,
    "longname": "src/connection/index.ts~Connection",
    "access": "public",
    "export": true,
    "importPath": "@open-ayame/ayame-web-sdk/src/connection/index.ts",
    "importStyle": "Connection",
    "description": "Peer Connection 接続を管理するクラスです。",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/connection/base.js~ConnectionBase"
    ]
  },
  {
    "__docId__": 127,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/connection/index.ts~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection/index.ts~Connection#constructor",
    "access": "public",
    "description": "オブジェクトを生成し、リモートのピアまたはサーバーに接続します。",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "signalingUrl",
        "description": "シグナリングに利用する URL"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "roomId",
        "description": "Ayame のルームID"
      },
      {
        "nullable": null,
        "types": [
          "ConnectionOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Ayame の接続オプション"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "debug",
        "description": "デバッグログの出力可否"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "isRelay",
        "description": "iceTransportPolicy を強制的に relay にするか"
      }
    ],
    "listens": [
      {
        "types": [
          "open"
        ],
        "description": "Ayame Server に accept され、PeerConnection が生成されると送信されます。"
      },
      {
        "types": [
          "connect"
        ],
        "description": "PeerConnection が接続されると送信されます。"
      },
      {
        "types": [
          "disconnect"
        ],
        "description": "PeerConnection が切断されると送信されます。"
      },
      {
        "types": [
          "addstream"
        ],
        "description": "リモートのストリームが追加されると送信されます。"
      },
      {
        "types": [
          "removestream"
        ],
        "description": "リモートのストリームが削除されると送信されます。"
      }
    ]
  },
  {
    "__docId__": 128,
    "kind": "typedef",
    "name": "MetadataOption",
    "memberof": "src/connection/index.ts~Connection",
    "static": true,
    "longname": "src/connection/index.ts~Connection.MetadataOption",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "authnMetadata",
        "description": "送信するメタデータ"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "MetadataOption"
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "connect",
    "memberof": "src/connection/index.ts~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection/index.ts~Connection#connect",
    "access": "public",
    "description": "PeerConnection  接続を開始します。",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "MediaStream",
          "null"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "stream",
        "description": "ローカルのストリーム"
      },
      {
        "nullable": null,
        "types": [
          "MetadataOption",
          "null"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "metadataOption",
        "description": "送信するメタデータ"
      }
    ],
    "return": null
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "stream",
    "memberof": "src/connection/index.ts~Connection",
    "static": false,
    "longname": "src/connection/index.ts~Connection#stream",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "MediaStream",
        "null"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "authnMetadata",
    "memberof": "src/connection/index.ts~Connection",
    "static": false,
    "longname": "src/connection/index.ts~Connection#authnMetadata",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "createDataChannel",
    "memberof": "src/connection/index.ts~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection/index.ts~Connection#createDataChannel",
    "access": "public",
    "description": "Datachannel を作成します。",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "dataChannel の label"
      },
      {
        "nullable": null,
        "types": [
          "RTCDataChannelInit",
          "undefined"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "options",
        "description": "dataChannel の init オプション"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RTCDataChannel",
        "null"
      ],
      "spread": false,
      "description": "生成されたデータチャネル"
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "removeDataChannel",
    "memberof": "src/connection/index.ts~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection/index.ts~Connection#removeDataChannel",
    "access": "public",
    "description": "Datachannel を削除します。",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "削除する dataChannel の label"
      }
    ],
    "return": null
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "disconnect",
    "memberof": "src/connection/index.ts~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection/index.ts~Connection#disconnect",
    "access": "public",
    "description": "PeerConnection  接続を切断します。",
    "lineNumber": 115,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "file",
    "name": "src/connection/options.ts",
    "content": "/**\n * @typedef {string} ConnectionDirection - オーディオ、ビデオの送受信方向に関するオプションです。\n *\n * - sendrecv\n * - recvonly\n * - sendonly\n */\nexport type ConnectionDirection = 'sendrecv' | 'recvonly' | 'sendonly';\n\n/**\n * @typedef {Object} ConnectionAudioOption - オーディオ接続に関するオプションです。\n * @property {ConnectionDirection} direction 送受信方向\n * @property {boolean} enabled 有効かどうかのフラグ\n */\nexport interface ConnectionAudioOption {\n  direction: ConnectionDirection;\n  enabled: boolean;\n}\n\n/**\n * @public\n * @typedef {string} VideoCodecOption - ビデオ接続のコーデックに関するオプションです。\n *\n * - VP8\n * - VP9\n * - H264\n */\nexport type VideoCodecOption = 'VP8' | 'VP9' | 'H264';\n\n/**\n * @typedef {Object} ConnectionVideoOption - ビデオ接続に関するオプションです。\n * @property {VideoCodecOption} codec コーデックの設定\n * @property {ConnectionDirection} direction 送受信方向\n * @property {boolean} enabled 有効かどうかのフラグ\n */\nexport interface ConnectionVideoOption {\n  codec?: VideoCodecOption;\n  direction: ConnectionDirection;\n  enabled: boolean;\n}\n\n/**\n * @typedef {Object} ConnectionOptions - 接続時に指定するオプションです。\n * @property {ConnectionAudioOption} audio オーディオの設定\n * @property {ConnectionVideoOption} video ビデオの設定\n * @property {string} clientId クライアントID\n * @property {Array.<RTCIceServer>} iceServers ayame server から iceServers が返って来なかった場合に使われる iceServer の情報\n * @property {string} signalingKey 送信するシグナリングキー\n */\nexport interface ConnectionOptions {\n  audio: ConnectionAudioOption;\n  video: ConnectionVideoOption;\n  clientId: string;\n  iceServers: Array<RTCIceServer>;\n  signalingKey?: string;\n}\n\n/**\n * @typedef {Object} MetadataOption - 接続時に指定できるメタデータです。\n * @property {any} authnMetadata 送信するメタデータ\n */\nexport interface MetadataOption {\n  authnMetadata?: any;\n}\n",
    "static": true,
    "longname": "/Users/nakai/shiguredo/ayame-web-sdk/src/connection/options.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "file",
    "name": "src/utils.ts",
    "content": "import { VideoCodecOption } from './connection/options';\n\n/**\n * @ignore\n */\ninterface Window {\n  performance: WindowPerformance;\n  navigator: any;\n}\ninterface WindowPerformance {\n  now(): number;\n}\ndeclare let window: Window;\n\n/**\n * @ignore\n */\nexport function randomString(strLength: number): string {\n  const result = [];\n  const charSet = '0123456789';\n  while (strLength--) {\n    result.push(charSet.charAt(Math.floor(Math.random() * charSet.length)));\n  }\n  return result.join('');\n}\n\n/**\n * @ignore\n */\nexport function browser(): string {\n  const ua = window.navigator.userAgent.toLocaleLowerCase();\n  if (ua.indexOf('edge') !== -1) {\n    return 'edge';\n  } else if (ua.indexOf('chrome') !== -1 && ua.indexOf('edge') === -1) {\n    return 'chrome';\n  } else if (ua.indexOf('safari') !== -1 && ua.indexOf('chrome') === -1) {\n    return 'safari';\n  } else if (ua.indexOf('opera') !== -1) {\n    return 'opera';\n  } else if (ua.indexOf('firefox') !== -1) {\n    return 'firefox';\n  }\n  return 'unknown';\n}\n\n/**\n * @ignore\n */\nexport function traceLog(title: string, value?: string | Record<string, any>): void {\n  let prefix = '';\n  if (window.performance) {\n    prefix = '[Ayame ' + (window.performance.now() / 1000).toFixed(3) + ']';\n  }\n  if (browser() === 'edge') {\n    console.log(prefix + ' ' + title + '\\n', value);\n  } else {\n    console.info(prefix + ' ' + title + '\\n', value);\n  }\n}\n\n// Stack Overflow より引用: https://stackoverflow.com/a/52760103\n// https://stackoverflow.com/questions/52738290/how-to-remove-video-codecs-in-webrtc-sdp\n/** @private */\nexport function getVideoCodecsFromString(codec: VideoCodecOption, codecs: Array<any>): Array<any> {\n  let mimeType = '';\n  if (codec === 'VP8') {\n    mimeType = 'video/VP8';\n  } else if (codec === 'VP9') {\n    mimeType = 'video/VP9';\n  } else if (codec === 'H264') {\n    mimeType = 'video/H264';\n  } else {\n    mimeType = `video/${codec}`;\n  }\n  const filteredCodecs: Array<any> = codecs.filter(c => c.mimeType == mimeType);\n  if (filteredCodecs.length < 1) {\n    throw new Error('invalid video codec type');\n  }\n  return filteredCodecs;\n}\n\n/**\n * @ignore\n */\nexport function removeCodec(sdp: string, codec: VideoCodecOption): string {\n  function internalFunc(tmpSdp: string): string {\n    // eslint-disable-next-line no-useless-escape\n    const codecre = new RegExp('(a=rtpmap:(\\\\d*) ' + codec + '/90000\\\\r\\\\n)');\n    const rtpmaps = tmpSdp.match(codecre);\n    if (rtpmaps == null || rtpmaps.length <= 2) {\n      return sdp;\n    }\n    const rtpmap = rtpmaps[2];\n    let modsdp = tmpSdp.replace(codecre, '');\n\n    const rtcpre = new RegExp('(a=rtcp-fb:' + rtpmap + '.*\\r\\n)', 'g');\n    modsdp = modsdp.replace(rtcpre, '');\n\n    const fmtpre = new RegExp('(a=fmtp:' + rtpmap + '.*\\r\\n)', 'g');\n    modsdp = modsdp.replace(fmtpre, '');\n\n    const aptpre = new RegExp('(a=fmtp:(\\\\d*) apt=' + rtpmap + '\\\\r\\\\n)');\n    const aptmaps = modsdp.match(aptpre);\n    let fmtpmap = '';\n    if (aptmaps != null && aptmaps.length >= 3) {\n      fmtpmap = aptmaps[2];\n      modsdp = modsdp.replace(aptpre, '');\n\n      const rtppre = new RegExp('(a=rtpmap:' + fmtpmap + '.*\\r\\n)', 'g');\n      modsdp = modsdp.replace(rtppre, '');\n    }\n\n    const videore = /(m=video.*\\r\\n)/;\n    const videolines = modsdp.match(videore);\n    if (videolines != null) {\n      //If many m=video are found in SDP, this program doesn't work.\n      const videoline = videolines[0].substring(0, videolines[0].length - 2);\n      const videoelems = videoline.split(' ');\n      let modvideoline = videoelems[0];\n      videoelems.forEach((videoelem, index) => {\n        if (index === 0) return;\n        if (videoelem == rtpmap || videoelem == fmtpmap) {\n          return;\n        }\n        modvideoline += ' ' + videoelem;\n      });\n      modvideoline += '\\r\\n';\n      modsdp = modsdp.replace(videore, modvideoline);\n    }\n    return internalFunc(modsdp);\n  }\n  return internalFunc(sdp);\n}\n",
    "static": true,
    "longname": "/Users/nakai/shiguredo/ayame-web-sdk/src/utils.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 137,
    "kind": "function",
    "name": "randomString",
    "memberof": "src/utils.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.ts~randomString",
    "access": "public",
    "export": true,
    "importPath": "@open-ayame/ayame-web-sdk/src/utils.ts",
    "importStyle": "{randomString}",
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "params": [
      {
        "name": "strLength",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "browser",
    "memberof": "src/utils.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.ts~browser",
    "access": "public",
    "export": true,
    "importPath": "@open-ayame/ayame-web-sdk/src/utils.ts",
    "importStyle": "{browser}",
    "description": "",
    "lineNumber": 33,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "function",
    "name": "traceLog",
    "memberof": "src/utils.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.ts~traceLog",
    "access": "public",
    "export": true,
    "importPath": "@open-ayame/ayame-web-sdk/src/utils.ts",
    "importStyle": "{traceLog}",
    "description": "",
    "lineNumber": 65,
    "ignore": true,
    "params": [
      {
        "name": "title",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 140,
    "kind": "function",
    "name": "getVideoCodecsFromString",
    "memberof": "src/utils.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.ts~getVideoCodecsFromString",
    "access": "private",
    "export": true,
    "importPath": "@open-ayame/ayame-web-sdk/src/utils.ts",
    "importStyle": "{getVideoCodecsFromString}",
    "description": null,
    "lineNumber": 92,
    "ignore": true,
    "params": [
      {
        "name": "codec",
        "types": [
          "*"
        ]
      },
      {
        "name": "codecs",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "removeCodec",
    "memberof": "src/utils.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.ts~removeCodec",
    "access": "public",
    "export": true,
    "importPath": "@open-ayame/ayame-web-sdk/src/utils.ts",
    "importStyle": "{removeCodec}",
    "description": "",
    "lineNumber": 127,
    "ignore": true,
    "params": [
      {
        "name": "sdp",
        "types": [
          "*"
        ]
      },
      {
        "name": "codec",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# ayame-web-sdk\n\n[![npm version](https://badge.fury.io/js/%40open-ayame%2Fayame-web-sdk.svg)](https://badge.fury.io/js/%40open-ayame%2Fayame-web-sdk)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Actions Status](https://github.com/OpenAyame/ayame-web-sdk/workflows/Lint%20And%20Flow%20Test/badge.svg)](https://github.com/OpenAyame/ayame-web-sdk/actions)\n\nWeb SDK for WebRTC Signaling Server Ayame\n\n## 時雨堂のオープンソースソフトウェアについて\n\n利用前に https://github.com/shiguredo/oss をお読みください。\n\n## 動作環境\n\n**最新版を利用してください**\n\n- Google Chrome\n- Apple Safari\n- Mozilla Firefox\n- Microsoft Edge\n\n## サンプル\n\n[OpenAyame/ayame-web-sdk-samples](https://github.com/OpenAyame/ayame-web-sdk-samples) にサンプルコードを用意しています。\n\n## API ドキュメント\n\nAPI ドキュメントは以下の URL を参照してください。\n\nhttps://openayame.github.io/ayame-web-sdk/index.html\n\n## CDN で利用する\n\n以下のURL を\n\n```\n<script src=\"https://unpkg.com/@open-ayame/ayame-web-sdk@2020.2.1/dist/ayame.min.js\"></script>\n```\n\nのように指定すると、npm などを経由せず簡単に Ayame を利用することができます。\n\n### unpkg\n\n```\nhttps://unpkg.com/@open-ayame/ayame-web-sdk@2020.1.2/dist/ayame.min.js\n```\n\n### jsdelivr\n\n```\nhttps://cdn.jsdelivr.net/npm/@open-ayame/ayame-web-sdk@2020.1.2/dist/ayame.min.js\n```\n\n### 双方向送受信接続する\n\n- [オンラインサンプル](https://openayame.github.io/ayame-web-sdk-samples/sendrecv.html)\n\n```javascript\nconst conn = Ayame.connection('wss://example.com/ws', 'test-room');\nconst startConn = async () => {\n    const mediaStream = await navigator.mediaDevices.getUserMedia({audio: true, video: true});\n    await conn.connect(mediaStream);\n    conn.on('disconnect', (e) => console.log(e));\n    conn.on('addstream', (e) => {\n        document.querySelector('#remote-video').srcObject = e.stream;\n    });\n    document.querySelector('#local-video').srcObject = mediaStream;\n};\nstartConn();\n```\n\n\n### 送信のみ(sendonly) で接続する\n\n- [オンラインサンプル](https://openayame.github.io/ayame-web-sdk-samples/sendonly.html)\n\n```javascript\nconst conn = Ayame.connection('wss://example.com/ws', 'test-room');\nconn.options.video.direction = 'sendonly';\nconn.options.audio.direction = 'sendonly';\nconst startConn = async () => {\n    const mediaStream = await navigator.mediaDevices.getUserMedia({audio: true, video: true});\n    await conn.connect(mediaStream);\n    conn.on('disconnect', (e) => console.log(e));\n    conn.on('addstream', (e) => {\n        document.querySelector('#remote-video').srcObject = e.stream;\n    });\n    document.querySelector('#local-video').srcObject = mediaStream;\n};\nstartConn();\n```\n\n\n### 受信のみ(recvonly) で接続する\n\n- [オンラインサンプル](https://openayame.github.io/ayame-web-sdk-samples/recvonly.html)\n\n```javascript\nconst conn = Ayame.connection('wss://example.com/ws', 'test-room');\nconn.options.video.direction = 'recvonly';\nconn.options.audio.direction = 'recvonly';\nconst startConn = async () => {\n    await conn.connect(null);\n    conn.on('disconnect', (e) => console.log(e));\n    conn.on('addstream', (e) => {\n        document.querySelector('#remote-video').srcObject = e.stream;\n    });\n};\nstartConn();\n```\n\n### datachannel でデータを送受信する\n\n\n- [オンラインサンプル](https://openayame.github.io/ayame-web-sdk-samples/datachannel.html)\n\n```javascript\n\nconst startConn = async () => {\n  const conn = Ayame.connection('wss://example.com/ws', 'test-room');\n  conn.on('open', (e) => {\n      conn.addDataChannel('dataChannel');\n  });\n  conn.on('data', (e) => {\n      console.log('data received: ',e.data);\n      });\n  await conn.connect(null);\n};\nconst sendData = (data) => {\n  conn.sendData(data);\n};\n```\n\n## ライセンス\n\nApache License 2.0\n\n```\nCopyright 2019, Kyoko Kadowaki aka kdxu (Original Author)\nCopyright 2019-2020, Shiguredo Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n",
    "longname": "/Users/nakai/shiguredo/ayame-web-sdk/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@open-ayame/ayame-web-sdk\",\n  \"version\": \"2020.3.0\",\n  \"description\": \"Web SDK for WebRTC Signaling Server Ayame\",\n  \"main\": \"dist/ayame.min.js\",\n  \"scripts\": {\n    \"watch\": \"rollup -w -c ./rollup.config.js\",\n    \"build\": \"rollup -c ./rollup.config.js\",\n    \"lint\": \"$(npm bin)/eslint --ext .tsx,.ts src/\",\n    \"fmt\": \"yarn lint --fix\",\n    \"deploy:docs\": \"$(npm bin)/gh-pages -d docs\",\n    \"esdoc\": \"$(npm bin)/esdoc\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/OpenAyame/ayame-web-sdk.git\"\n  },\n  \"directories\": {\n    \"doc\": \"docs/\"\n  },\n  \"types\": \"dist/ayame.d.ts\",\n  \"homepage\": \"https://github.com/OpenAyame/ayame-web-sdk\",\n  \"author\": \"Shiguredo Inc.\",\n  \"license\": \"Apache-2.0\",\n  \"devDependencies\": {\n    \"@types/node\": \"^12.12.14\",\n    \"@types/webrtc\": \"^0.0.25\",\n    \"@typescript-eslint/eslint-plugin\": \"^2.9.0\",\n    \"@typescript-eslint/parser\": \"^2.9.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-react-plugin\": \"^1.0.1\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"esdoc-typescript-plugin\": \"^1.0.1\",\n    \"eslint\": \"^6.7.2\",\n    \"eslint-config-prettier\": \"^6.7.0\",\n    \"eslint-plugin-import\": \"^2.18.2\",\n    \"eslint-plugin-prettier\": \"^3.1.1\",\n    \"gh-pages\": \"^2.1.1\",\n    \"prettier\": \"^1.19.1\",\n    \"rollup\": \"^1.27.6\",\n    \"rollup-plugin-node-resolve\": \"^5.2.0\",\n    \"rollup-plugin-terser\": \"^5.1.2\",\n    \"rollup-plugin-typescript2\": \"^0.25.2\",\n    \"typescript\": \"^3.7.2\"\n  }\n}\n",
    "longname": "/Users/nakai/shiguredo/ayame-web-sdk/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]